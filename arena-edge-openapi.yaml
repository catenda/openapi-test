---
openapi: 3.0.3
info:
  title: Generated API
  version: "1.0"
paths:
  /:
    get:
      responses:
        "200":
          description: OK
  /.well-known/{segments}:
    get:
      parameters:
      - name: segments
        in: path
        required: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/PathSegment'
      responses:
        "200":
          description: OK
  /account/apps:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /account/apps/create-app:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleAppCredentials'
  /account/apps/get-apps:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppsResponse'
  /account/apps/update-app:
    post:
      responses:
        "200":
          description: OK
  /account/authentication:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /account/change-password:
    post:
      responses:
        "200":
          description: OK
  /account/geoip:
    get:
      responses:
        "200":
          description: OK
  /account/integrations:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /account/integrations/apps/{client-id}:
    post:
      parameters:
      - name: client-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /account/integrations/apps/{client-id}/revoke:
    post:
      parameters:
      - name: client-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /account/link-account/{code}:
    get:
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /account/mfa/authenticator/disable:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/mfa/authenticator/enable:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/mfa/authenticator/setup:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticatorSetupResponse'
  /account/mfa/authenticator/status:
    get:
      responses:
        "200":
          description: OK
  /account/mfa/authenticator/status-signed-out:
    post:
      responses:
        "200":
          description: OK
  /account/mfa/authenticator/verify:
    post:
      responses:
        "200":
          description: OK
  /account/notifications:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /account/notifications/mail/update-config:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/notifications/settings:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationSettingListResponse'
  /account/notifications/settings/configuration:
    post:
      responses:
        "200":
          description: OK
  /account/notifications/settings/enabled:
    post:
      responses:
        "200":
          description: OK
  /account/notifications/settings/events:
    post:
      responses:
        "200":
          description: OK
  /account/notifications/slack/update-url:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/notifications/when:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/notifications/where:
    post:
      parameters:
      - name: continue
        in: query
        schema:
          type: string
      - name: enable
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /account/plan:
    get:
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
  /account/preferences:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactView'
  /account/preferences/date-format:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateFormat'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/preferences/full-width:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/preferences/issue-comments-direction:
    get:
      responses:
        "200":
          description: OK
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/preferences/issue-settings:
    get:
      responses:
        "200":
          description: OK
  /account/preferences/issue-settings/table-column-widths:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/preferences/issue-settings/view-mode:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/preferences/locale:
    get:
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
  /account/preferences/relative-time:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/profile:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /account/profile/contact:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /account/profile/email/request:
    get:
      parameters:
      - name: redirect
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /account/profile/email/verify/{token}:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /account/profile/jwt/verify/{token}:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /api/invite/token-status/{token}:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InviteToken'
      responses:
        "200":
          description: OK
  /api/reset-password/{token}:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /api/signup/token-status/{token}:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SignUpToken'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/signup/verify-email:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailPOST'
      responses:
        "200":
          description: OK
  /api/signup/{token}/create-user:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SignUpToken'
      - name: continue
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPOST'
      responses:
        "200":
          description: OK
  /avatar/remove:
    post:
      responses:
        "200":
          description: OK
  /avatar/upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /avatar/{user}/{etag}:
    get:
      parameters:
      - name: etag
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      - name: size
        in: query
        schema:
          format: int32
          default: "80"
          type: integer
      responses:
        "200":
          description: OK
  /aws/webhook/mail:
    post:
      responses:
        "201":
          description: Created
  /cde/select-documents:
    get:
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /cde/select-upload-documents:
    get:
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /cobuilder/sessions:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CobuilderSessionEntity'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CobuilderSessionEntity'
  /cobuilder/sessions/{cobuilder-session}/workplaces:
    get:
      parameters:
      - name: cobuilder-session
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CobuilderWorkplaceEntity'
  /configuration:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
  /current:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
  /developers:
    get:
      responses:
        "200":
          description: OK
  /developers/{segments}:
    get:
      parameters:
      - name: segments
        in: path
        required: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/PathSegment'
      responses:
        "200":
          description: OK
  /download-zip/{zip-ref}:
    get:
      parameters:
      - name: zip-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ZipRef'
      responses:
        "200":
          description: OK
  /dropbox/auth:
    get:
      responses:
        "200":
          description: OK
  /dropbox/{project-id}/{library-ref}/children:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /dropbox/{project-id}/{library-ref}/renewaccess:
    get:
      responses:
        "200":
          description: OK
  /dropbox/{project-id}/{library-ref}/revokeaccess:
    post:
      responses:
        "200":
          description: OK
  /dropbox/{project-id}/{library-ref}/shared-folder:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DropboxSharedFolder'
  /dropbox/{project-id}/{library-ref}/{dropbox-entry-id}/download:
    get:
      parameters:
      - name: dropbox-entry-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CloudStorageEntryId'
      - name: preview
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /dropbox/{project-id}/{library-ref}/{dropbox-entry-id}/thumbnail:
    get:
      parameters:
      - name: dropbox-entry-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CloudStorageEntryId'
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /filters:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Filters'
  /filters/counts:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterCounts'
  /filters/counts/new:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterCounts'
  /filters/saved-filters/new:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedFilter'
  /filters/saved-filters/{saved-filter-id}/delete:
    delete:
      parameters:
      - name: saved-filter-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SavedFilterRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /filters/saved-filters/{saved-filter-id}/replace:
    put:
      parameters:
      - name: saved-filter-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SavedFilterRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedFilter'
  /filters/saved-filters/{saved-filter-id}/update-title:
    put:
      parameters:
      - name: saved-filter-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SavedFilterRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedFilter'
  /forgot-password:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      responses:
        "200":
          description: OK
  /geometry/{project-ref}/{revision-ref}:
    get:
      parameters:
      - name: revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
  /github/webhook/pull_request:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
      responses:
        "200":
          description: OK
  /grid/{project-ref}:
    get:
      parameters:
      - name: revision
        in: query
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
    head:
      parameters:
      - name: revision
        in: query
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
  /health:
    get:
      responses:
        "200":
          description: OK
  /invite/{token}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /invite/{token}/accept:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InviteToken'
      responses:
        "200":
          description: OK
  /issues/markup:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /local-storage/{bucket-name}/{key}:
    get:
      parameters:
      - name: bucket-name
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: bucket-name
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "200":
          description: OK
  /login/jwt/authorize:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /login/oauth2/authorize:
    get:
      parameters:
      - name: client_id
        in: query
        schema:
          type: string
      - name: code_challenge
        in: query
        schema:
          type: string
      - name: code_challenge_method
        in: query
        schema:
          type: string
      - name: prompt
        in: query
        schema:
          type: string
      - name: redirect_uri
        in: query
        schema:
          type: string
      - name: response_mode
        in: query
        schema:
          type: string
      - name: response_type
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /login/oauth2/authorize/allow:
    post:
      responses:
        "200":
          description: OK
  /login/oauth2/authorize/deny:
    post:
      parameters:
      - name: prompt
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /login/oauth2/authorize/error:
    get:
      parameters:
      - name: error
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/View'
  /markdown-syntax-preview:
    get:
      responses:
        "200":
          description: OK
  /modal:
    get:
      parameters:
      - name: key
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /new-project:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /new-project/owner-candidates:
    get:
      responses:
        "200":
          description: OK
  /notifications:
    get:
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/View'
  /notifications/dropdown:
    get:
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 5
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: project-id
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /notifications/read-all:
    post:
      responses:
        "200":
          description: OK
  /notifications/settings:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactView'
  /notifications/unread:
    get:
      responses:
        "200":
          description: OK
  /open-graph/{url}:
    get:
      parameters:
      - name: url
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /orgs:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      responses:
        "200":
          description: OK
  /orgs/{org}:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /orgs/{org}/account/profile:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /orgs/{org}/account/profile/remove-avatar:
    post:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
  /orgs/{org}/account/profile/update-avatar:
    post:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /orgs/{org}/account/profile/update-email:
    post:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
  /orgs/{org}/account/profile/verify-email:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
  /orgs/{org}/account/profile/verify-email/{token}:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /orgs/{org}/join-project/{project-id}:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      - name: project-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProjectRef'
      responses:
        "200":
          description: OK
  /orgs/{org}/members:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /orgs/{org}/profile:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /orgs/{org}/project-members:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /orgs/{org}/projects:
    get:
      parameters:
      - name: org
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /ping:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}:
    get:
      parameters:
      - name: boards-limit
        in: query
        schema:
          format: int32
          default: "2"
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/approval-dashboard:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardApprovalsReact'
  /project/{project-id}/avatar/remove/{user}:
    post:
      parameters:
      - name: user
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/avatar/upload/{user}:
    post:
      parameters:
      - name: user
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/bcf/image/{guid}:
    get:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BCFImageRef'
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/bookmarks/get:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResultBookmarkEntity'
  /project/{project-id}/bookmarks/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/bookmarks/new-bookmark:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkEntity'
  /project/{project-id}/bookmarks/{bookmark}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/bookmarks/{bookmark}/copy:
    post:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks/{bookmark}/delete:
    delete:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks/{bookmark}/get:
    get:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkEntity'
  /project/{project-id}/bookmarks/{bookmark}/lock-revisions:
    post:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks/{bookmark}/project-sharing:
    post:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks/{bookmark}/share:
    post:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkShareSettingsEntity'
  /project/{project-id}/bookmarks/{bookmark}/star:
    post:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks/{bookmark}/undelete:
    post:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks/{bookmark}/unstar:
    post:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/bookmarks/{bookmark}/visualization:
    get:
      parameters:
      - name: bookmark
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualizationEntity'
  /project/{project-id}/candidate-libraries:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateLibrary'
  /project/{project-id}/cde/select-documents:
    get:
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/cde/select-documents/get-session:
    get:
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadSessionEntity'
  /project/{project-id}/cde/select-upload-documents:
    get:
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/cde/select-upload-documents/get-files:
    get:
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientFileEntity'
  /project/{project-id}/collections/{collection-ref}/files:
    get:
      parameters:
      - name: collection-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemCollectionRef'
      - name: deleted
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseCollectionFileEntity'
  /project/{project-id}/current-member:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentMember'
  /project/{project-id}/documents:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsViewModel'
  /project/{project-id}/documents/approvals:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseApprovalRequestEntity'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestEntity'
  /project/{project-id}/documents/approvals/settings:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalSettingsEntity'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/approvals/{approval-request-number}:
    get:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestEntity'
    parameters:
    - name: approval-request-number
      in: path
      required: true
      schema:
        format: int32
        type: integer
  /project/{project-id}/documents/approvals/{approval-request-number}/approve-all:
    post:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestEntity'
    parameters:
    - name: approval-request-number
      in: path
      required: true
      schema:
        format: int32
        type: integer
  /project/{project-id}/documents/approvals/{approval-request-number}/discard:
    post:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestEntity'
    parameters:
    - name: approval-request-number
      in: path
      required: true
      schema:
        format: int32
        type: integer
  /project/{project-id}/documents/approvals/{approval-request-number}/events:
    get:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: limit
        in: query
        schema:
          format: int32
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalRequestEventsEntity'
  /project/{project-id}/documents/approvals/{approval-request-number}/files:
    get:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseApprovalFileEntity'
    post:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalFileEntity'
    delete:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "204":
          description: No Content
  /project/{project-id}/documents/approvals/{approval-request-number}/files/{approval-file-id}:
    get:
      parameters:
      - name: approval-file-id
        in: path
        required: true
        schema:
          type: string
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalFileWithEventsEntity'
    post:
      parameters:
      - name: approval-file-id
        in: path
        required: true
        schema:
          type: string
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalResponseEntity'
    delete:
      parameters:
      - name: approval-file-id
        in: path
        required: true
        schema:
          type: string
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: No Content
  /project/{project-id}/documents/approvals/{approval-request-number}/files/{approval-file-id}/annotations:
    get:
      parameters:
      - name: approval-file-id
        in: path
        required: true
        schema:
          type: string
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApprovalResponseAnnotationsEntity'
  /project/{project-id}/documents/approvals/{approval-request-number}/files/{approval-file-id}/{approval-response-id}/image/{approval-image-id}:
    get:
      parameters:
      - name: approval-file-id
        in: path
        required: true
        schema:
          type: string
      - name: approval-image-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApprovalImageRef'
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: approval-response-id
        in: path
        required: true
        schema:
          type: string
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/approvals/{approval-request-number}/publish:
    post:
      parameters:
      - name: approval-request-number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
    parameters:
    - name: approval-request-number
      in: path
      required: true
      schema:
        format: int32
        type: integer
  /project/{project-id}/documents/delete-drafts:
    delete:
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/settings/activate-status-workflow:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateStatusWorkflowEntity'
  /project/{project-id}/documents/settings/default-status:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultDocumentStatusModel'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/settings/status:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
      deprecated: true
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/settings/statuses:
    get:
      parameters:
      - name: filter
        in: query
        schema:
          $ref: '#/components/schemas/Filter1'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/{library-ref}:
    get:
      parameters:
      - name: library-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/{library-ref}/{library-item-ref}:
    get:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/documents/{library-ref}/{library-item-ref}/restore:
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/get-project-settings:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactProjectSettings'
  /project/{project-id}/image:
    get:
      parameters:
      - name: size
        in: query
        schema:
          format: int32
          default: "600"
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/inspect/issue-numbers-by-ifc-guids:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  format: int32
                  type: integer
  /project/{project-id}/inspect/issues:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectIssues'
  /project/{project-id}/inspect/libraries:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectLibraries'
  /project/{project-id}/inspect/products:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InspectProducts'
  /project/{project-id}/instantiable-library-plugins:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryPlugin'
  /project/{project-id}/invites:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/invites/new:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/invites/resolve-invite-conten:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ResolvedInvitesView'
  /project/{project-id}/invites/resolve-invite-from-project:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ResolvedInvitesView'
  /project/{project-id}/invites/{token}/resend:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InviteToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/invites/{token}/revoke:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InviteToken'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issue-dashboard:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardIssuesReact'
  /project/{project-id}/issue-list:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueList'
  /project/{project-id}/issue-points:
    get:
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/issue-points-paginated:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseIssuePointWithColorAndAccess'
  /project/{project-id}/issue-points/{number}:
    put:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/issues:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/issues/board-list:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueBoardReact'
  /project/{project-id}/issues/board-statistics:
    get:
      parameters:
      - name: aggregated
        in: query
        schema:
          type: string
      - name: board
        in: query
        schema:
          $ref: '#/components/schemas/IssueBoardRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardIssuesReact'
  /project/{project-id}/issues/boards:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/issues/boards/default-board:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueBoardReact'
  /project/{project-id}/issues/boards/{board}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueBoard1'
  /project/{project-id}/issues/boards/{board}/acl-settings:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullAcl'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/add-status:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/add-type:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/archive:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/delete-status:
    delete:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/delete-type:
    delete:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/details:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueBoardDetails'
  /project/{project-id}/issues/boards/{board}/get:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueBoardReact'
  /project/{project-id}/issues/boards/{board}/link-fields:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/move-status:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/move-type:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/restore:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/set-as-default-board:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/unlinked-issues:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlinkedIssuesResult'
  /project/{project-id}/issues/boards/{board}/update-board-type:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                issue-board-type:
                  type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/update-description:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                issue-board-description:
                  type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/update-mail:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/update-name:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                issue-board-name:
                  type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/update-owner:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/update-status:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/boards/{board}/update-type:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/comments-direction:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/export-issues:
    post:
      parameters:
      - name: format
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/export-issues/v2:
    post:
      parameters:
      - name: format
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/exports:
    get:
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/IssuesExportsModel'
  /project/{project-id}/issues/exports/{issues-export}:
    get:
      parameters:
      - name: issues-export
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueExportModel'
  /project/{project-id}/issues/exports/{issues-export}/details:
    get:
      parameters:
      - name: issues-export
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/IssueExportModel'
  /project/{project-id}/issues/exports/{issues-export}/download:
    get:
      parameters:
      - name: issues-export
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/graphs/current-state-chart:
    get:
      parameters:
      - name: assigned
        in: query
        schema:
          type: string
      - name: board
        in: query
        schema:
          type: string
      - name: milestone
        in: query
        schema:
          $ref: '#/components/schemas/MilestoneRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartWrapper'
  /project/{project-id}/issues/graphs/ppc:
    get:
      parameters:
      - name: board
        in: query
        schema:
          $ref: '#/components/schemas/IssueBoardRef'
      - name: future-weeks
        in: query
        schema:
          format: int32
          default: "2"
          type: integer
      - name: past-weeks
        in: query
        schema:
          format: int32
          default: "16"
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartWrapper'
  /project/{project-id}/issues/graphs/resolution-time:
    get:
      parameters:
      - name: board
        in: query
        schema:
          $ref: '#/components/schemas/IssueBoardRef'
      - name: days
        in: query
        schema:
          format: int32
          default: "30"
          type: integer
      - name: title
        in: query
        schema:
          default: Resolution time
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartWrapper'
  /project/{project-id}/issues/graphs/status:
    get:
      parameters:
      - name: board
        in: query
        schema:
          $ref: '#/components/schemas/IssueBoardRef'
      - name: days
        in: query
        schema:
          format: int32
          default: "30"
          type: integer
      - name: open-closed
        in: query
        schema:
          default: false
          type: boolean
      - name: title
        in: query
        schema:
          default: Brundown
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartWrapper'
  /project/{project-id}/issues/graphs/type:
    get:
      parameters:
      - name: board
        in: query
        schema:
          $ref: '#/components/schemas/IssueBoardRef'
      - name: days
        in: query
        schema:
          format: int32
          default: "30"
          type: integer
      - name: title
        in: query
        schema:
          default: ""
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartWrapper'
  /project/{project-id}/issues/image/upload:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SimpleUser'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/import-bcf/v2:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/imports:
    get:
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/IssuesImportsModel'
  /project/{project-id}/issues/imports/{issues-import}:
    get:
      parameters:
      - name: issues-import
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueImportModel'
  /project/{project-id}/issues/imports/{issues-import}/details:
    get:
      parameters:
      - name: issues-import
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/IssueImportModel'
  /project/{project-id}/issues/issues-table-column-order:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/issues-table-hidden-cols:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/issues-table-sort:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/labels:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/list:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueTitle'
  /project/{project-id}/issues/move-history:
    get:
      parameters:
      - name: board-ref
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/IssuesMoveInfosModel'
  /project/{project-id}/issues/move-history-ids:
    get:
      parameters:
      - name: board
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /project/{project-id}/issues/move-history-list:
    get:
      parameters:
      - name: board
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseIssuesMoveInfoEntity'
  /project/{project-id}/issues/move-history/{issues-move}:
    get:
      parameters:
      - name: issues-move
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/IssuesMoveDetailsEntity'
  /project/{project-id}/issues/multiupdate:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/sort-options:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/statistics:
    get:
      parameters:
      - name: board
        in: query
        schema:
          $ref: '#/components/schemas/IssueBoardRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/issues/templates:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/issues/templates/data:
    get:
      parameters:
      - name: template-type
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseIssueTemplateEntity'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/templates/data/{issue-template}:
    get:
      parameters:
      - name: issue-template
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueTemplateRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTemplateEntity'
    put:
      parameters:
      - name: issue-template
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueTemplateRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTemplateEntity'
  /project/{project-id}/issues/templates/data/{issue-template}/archive:
    post:
      parameters:
      - name: issue-template
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueTemplateRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/templates/data/{issue-template}/unarchive:
    post:
      parameters:
      - name: issue-template
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueTemplateRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/templates/{issue-template}:
    get:
      parameters:
      - name: issue-template
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueTemplateRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/issues/{board}/list-users:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /project/{project-id}/issues/{board}/members:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersResult'
  /project/{project-id}/issues/{board}/move-issues:
    post:
      parameters:
      - name: board
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueBoardRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/parse-markdown:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/users:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueBoardUsersResult'
  /project/{project-id}/issues/{board}/{guid}:
    get:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/add-relations:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/comment:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
      deprecated: true
  /project/{project-id}/issues/{board}/{guid}/delete:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/labels/update:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/remove-relations:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-assigned-to:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-custom-field:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-description:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-description-react:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-due-date-react:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-milestone:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-requester:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-status:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-title:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{board}/{guid}/update-type:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/issues/{number}/add-github-url:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/add-relations:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/annotations:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueAnnotations'
  /project/{project-id}/issues/{number}/comment:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/comments:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCommentsEventsAndAnnotations'
  /project/{project-id}/issues/{number}/follow:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/get:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueReact'
  /project/{project-id}/issues/{number}/labels/update:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/library-items:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueLibraryItems'
  /project/{project-id}/issues/{number}/library-items/link:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/library-items/unlink:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/link-items:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/linked-items:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/related:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueReact'
  /project/{project-id}/issues/{number}/related-issues:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueList'
  /project/{project-id}/issues/{number}/remove-comment-and-viewpoint:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: comment
        in: query
        schema:
          $ref: '#/components/schemas/IssueCommentRef'
      - name: viewpoint
        in: query
        schema:
          $ref: '#/components/schemas/ViewDataRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveCommentAndViewpointData'
    delete:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCommentAndViewpointEntity'
  /project/{project-id}/issues/{number}/remove-github-url:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/remove-relations:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/unfollow:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/unlink-items:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/viewdatas:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueViewDatasReact'
  /project/{project-id}/issues/{number}/viewdatas/{viewpoint}/models:
    put:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: viewpoint
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ViewDataRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/issues/{number}/visualization/{viewpoint}:
    get:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: viewpoint
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ViewDataRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualizationEntity'
  /project/{project-id}/issues/{number}/{comment}/history:
    get:
      parameters:
      - name: comment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueCommentRef'
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssueEvent'
  /project/{project-id}/issues/{number}/{comment}/update-comment:
    post:
      parameters:
      - name: comment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueCommentRef'
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCommentResponseEntity'
  /project/{project-id}/kanban/lanes:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KanbanLaneEntity'
  /project/{project-id}/kanban/lanes/add:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/kanban/lanes/sort:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/kanban/lanes/{lane-id}/remove:
    delete:
      parameters:
      - name: lane-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/kanban{any}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/labelcollection/{label-collection-ref}:
    get:
      parameters:
      - name: deleted
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
  /project/{project-id}/labels:
    get:
      parameters:
      - name: deleted
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/labels/delete:
    delete:
      responses:
        "200":
          description: OK
  /project/{project-id}/labels/new:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/labels/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/leave:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/LibrariesView'
  /project/{project-id}/libraries/add-lookup-library:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupLibraryGET'
  /project/{project-id}/libraries/documents/request-zip:
    post:
      parameters:
      - name: accept-all
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/request-zip/{zip-id}/status:
    get:
      parameters:
      - name: zip-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ZipRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/actions:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/drafts:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/drafts/{document-draft-id}:
    delete:
      parameters:
      - name: document-draft-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentDraftId'
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/drafts/{document-draft-id}/download:
    get:
      parameters:
      - name: document-draft-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentDraftId'
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: preview
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/drafts/{document-draft-id}/download-preview.{format}:
    get:
      parameters:
      - name: document-draft-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentDraftId'
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: format
        in: path
        required: true
        schema:
          type: string
      - name: preview
        in: query
        schema:
          type: boolean
      - name: Range
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/drafts/{document-draft-id}/image:
    get:
      parameters:
      - name: document-draft-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentDraftId'
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/drafts/{document-draft-id}/preview-status:
    get:
      parameters:
      - name: document-draft-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentDraftId'
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPreviewStatusResult'
  /project/{project-id}/libraries/documents/{document-id}/drafts/{document-draft-id}/publish:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: document-draft-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentDraftId'
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/drafts/{document-draft-id}/set-status:
    post:
      parameters:
      - name: document-draft-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentDraftId'
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/files/{document-file-id}/annotations:
    get:
      parameters:
      - name: document-file-id
        in: path
        required: true
        schema:
          type: string
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnnotatedIssue'
  /project/{project-id}/libraries/documents/{document-id}/files/{document-file-id}/issues/{number}/annotations:
    get:
      parameters:
      - name: document-file-id
        in: path
        required: true
        schema:
          type: string
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentAnnotation'
    post:
      parameters:
      - name: document-file-id
        in: path
        required: true
        schema:
          type: string
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentAnnotation'
  /project/{project-id}/libraries/documents/{document-id}/revisions:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/{document-revision-ref}/download:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      - name: preview
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/{document-revision-ref}/download-preview.{format}:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      - name: format
        in: path
        required: true
        schema:
          type: string
      - name: preview
        in: query
        schema:
          type: boolean
      - name: Range
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/{document-revision-ref}/image:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/{document-revision-ref}/preview-status:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentPreviewStatusResult'
  /project/{project-id}/libraries/documents/{document-id}/{document-revision-ref}/request-drawing:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrawingDataResponse'
    post:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrawingDataResponse'
  /project/{project-id}/libraries/documents/{document-id}/{document-revision-ref}/set-status:
    post:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/documents/{document-id}/{document-revision-ref}/{page-image-ref}/page-image:
    get:
      parameters:
      - name: document-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: document-revision-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DocumentRevisionId'
      - name: page
        in: query
        schema:
          format: int32
          type: integer
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/libraries/new/{library-type}:
    get:
      parameters:
      - name: library-type
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
      deprecated: true
  /project/{project-id}/libraries/new/{library-type}/add:
    post:
      parameters:
      - name: library-type
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
      deprecated: true
  /project/{project-id}/libraries/{library-ref}:
    get:
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryPage'
  /project/{project-id}/libraries/{library-ref}/acl:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedAcl'
  /project/{project-id}/libraries/{library-ref}/acl/settings:
    get:
      parameters:
      - name: document-id
        in: query
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullAcl'
    post:
      parameters:
      - name: document-id
        in: query
        schema:
          $ref: '#/components/schemas/DocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/approvals:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/libraries/{library-ref}/approvals/settings:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/libraries/{library-ref}/approvals/settings/issue-templates:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/libraries/{library-ref}/approvals/settings/issue-templates/{issue-template-id}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/libraries/{library-ref}/approvals/{approval-request-number}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/libraries/{library-ref}/approvals/{approval-request-number}/file/{approval-file-id}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/libraries/{library-ref}/client/renew:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenewLibraryAccessResult'
  /project/{project-id}/libraries/{library-ref}/client/revoke:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeLibraryAccessResult'
  /project/{project-id}/libraries/{library-ref}/client/status:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryClientStatus'
  /project/{project-id}/libraries/{library-ref}/cobuilder/renewaccess:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/cobuilder/revokeaccess:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/cobuilder/sync:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/cobuilder/{library-item-ref}/hide:
    get:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/complete-ifc-guids:
    post:
      parameters:
      - name: uncomplete
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /project/{project-id}/libraries/{library-ref}/completed-ifc-guids:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /project/{project-id}/libraries/{library-ref}/documents/drafts:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/documents/new-folder:
    get:
      parameters:
      - name: parent-id
        in: query
        schema:
          $ref: '#/components/schemas/DocumentId'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
      deprecated: true
    post:
      parameters:
      - name: parent-id
        in: query
        schema:
          $ref: '#/components/schemas/DocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
      deprecated: true
  /project/{project-id}/libraries/{library-ref}/documents/revisions:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/documents/upload:
    get:
      parameters:
      - name: folder-id
        in: query
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: is-models-action
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDocumentsModel'
    post:
      parameters:
      - name: document-id
        in: header
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: filename
        in: header
        schema:
          type: string
      - name: filename-option
        in: header
        schema:
          type: string
      - name: folder-id
        in: header
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: is-models-action
        in: header
        schema:
          type: string
      - name: status-ref
        in: header
        schema:
          $ref: '#/components/schemas/DocumentStatusRef'
      - name: title
        in: header
        schema:
          type: string
      - name: type
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/documents/upload-zip-structure:
    post:
      parameters:
      - name: file-size
        in: header
        schema:
          format: int64
          type: integer
      - name: folder-id
        in: header
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      - name: on-exists
        in: header
        schema:
          $ref: '#/components/schemas/OnFileExists'
      - name: status
        in: header
        schema:
          $ref: '#/components/schemas/DocumentStatusRef'
      - name: title
        in: header
        schema:
          type: string
      - name: type
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/documents/{library-item-ref}/new:
    get:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      - name: filename
        in: header
        schema:
          type: string
      - name: filename-option
        in: header
        schema:
          type: string
      - name: status-ref
        in: header
        schema:
          $ref: '#/components/schemas/DocumentStatusRef'
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/enable-complete:
    get:
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LibraryCompleteModel'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/issue/{number}/upload-and-link:
    post:
      parameters:
      - name: number
        in: path
        required: true
        schema:
          format: int32
          type: integer
      - name: add-to-existing-document
        in: header
        schema:
          type: boolean
      - name: document-id
        in: header
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: filename
        in: header
        schema:
          type: string
      - name: folder-id
        in: header
        schema:
          $ref: '#/components/schemas/DocumentId'
      - name: status-ref
        in: header
        schema:
          $ref: '#/components/schemas/DocumentStatusRef'
      - name: title
        in: header
        schema:
          type: string
      - name: type
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/items:
    get:
      parameters:
      - name: uploaded-documents
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleAlert'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryItemsPage'
  /project/{project-id}/libraries/{library-ref}/items-by-ifc-guids:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryItemsRedirectResult'
  /project/{project-id}/libraries/{library-ref}/items-by-product-type:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/items/acls/data:
    get:
      parameters:
      - name: document-ids
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullAclDocuments'
    post:
      parameters:
      - name: document-ids
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/items/acls/settings:
    get:
      parameters:
      - name: document-ids
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedAcl'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregatedAcl'
  /project/{project-id}/libraries/{library-ref}/items/children:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryItemChildren'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleAlert'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryItemChildren'
  /project/{project-id}/libraries/{library-ref}/items/delete-items:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLibraryItemsModel'
  /project/{project-id}/libraries/{library-ref}/items/delete-items/execute:
    post:
      parameters:
      - name: deleteModelsAsDocuments
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLibraryItemsResult'
  /project/{project-id}/libraries/{library-ref}/items/labels/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelItemsResultLibraryItem'
  /project/{project-id}/libraries/{library-ref}/items/link-items:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryLinkedResult'
  /project/{project-id}/libraries/{library-ref}/items/linked-items:
    get:
      parameters:
      - name: option
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryLinkedResult'
    post:
      parameters:
      - name: option
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryLinkedResult'
  /project/{project-id}/libraries/{library-ref}/items/list:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseLibraryItem'
  /project/{project-id}/libraries/{library-ref}/items/move-documents-here:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveDocumentsViewModel'
  /project/{project-id}/libraries/{library-ref}/items/move-documents-here/execute:
    post:
      parameters:
      - name: document-id
        in: query
        schema:
          $ref: '#/components/schemas/DocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/items/restore-items:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreLibraryItemsResult'
  /project/{project-id}/libraries/{library-ref}/items/unlink-items:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryLinkedResult'
  /project/{project-id}/libraries/{library-ref}/items/{library-item-ref}:
    get:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
      deprecated: true
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
      deprecated: true
  /project/{project-id}/libraries/{library-ref}/items/{library-item-ref}/associated-guids:
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /project/{project-id}/libraries/{library-ref}/items/{library-item-ref}/entity:
    get:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryItem'
  /project/{project-id}/libraries/{library-ref}/items/{library-item-ref}/move-to-folder:
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/items/{library-item-ref}/new-draft:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadDocumentDraftModel'
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      - name: filename
        in: header
        schema:
          type: string
      - name: status-ref
        in: header
        schema:
          $ref: '#/components/schemas/DocumentStatusRef'
      - name: title
        in: header
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/items/{library-item-ref}/rename:
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                library-item-name:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditNameResult'
  /project/{project-id}/libraries/{library-ref}/items/{library-item-ref}/view:
    get:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/links/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/links/{library-item-ref}/remove:
    get:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      parameters:
      - name: library-item-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/navigation-bar:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LibraryNavigationBar'
  /project/{project-id}/libraries/{library-ref}/objects/upload:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/parents:
    get:
      parameters:
      - name: library-item-ref
        in: query
        schema:
          $ref: '#/components/schemas/LibraryItemRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryItem'
  /project/{project-id}/libraries/{library-ref}/settings:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/libraries/{library-ref}/settings/classification:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationLibraryGET'
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationLibraryGET'
    delete:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/settings/delete:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
    delete:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/settings/folder-content:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseShareItem'
  /project/{project-id}/libraries/{library-ref}/settings/lookup:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupLibraryGET'
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupLibraryGET'
    delete:
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/settings/set-shared-folder:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/settings/update:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/settings/update-name:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/libraries/{library-ref}/star:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteLibrariesModel'
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteLibrariesModel'
  /project/{project-id}/libraries/{library-ref}/zip-uploads:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/libraries/{library-ref}/zip-uploads/items:
    get:
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 20
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseZipUploadEntity'
  /project/{project-id}/libraries/{library-ref}/zip-uploads/items/{zip-id}:
    get:
      parameters:
      - name: zip-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZipUploadEntity'
  /project/{project-id}/libraries/{library-ref}/zip-uploads/{zip-id}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /project/{project-id}/library-plugins:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LibraryPlugin'
  /project/{project-id}/markers/color-mode:
    get:
      responses:
        "200":
          description: OK
    post:
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/markers/size:
    get:
      responses:
        "200":
          description: OK
    post:
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/members:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/members/{user}:
    get:
      parameters:
      - name: user
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/members/{user}/owner:
    post:
      parameters:
      - name: user
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/members/{user}/remove:
    post:
      parameters:
      - name: user
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/members/{user}/set-role:
    post:
      parameters:
      - name: user
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/members/{user}/update-name:
    post:
      parameters:
      - name: user
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/milestone-list:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MilestoneListResult'
  /project/{project-id}/milestones-with-statistics:
    get:
      parameters:
      - name: closed
        in: query
        schema:
          type: boolean
      - name: limit
        in: query
        schema:
          format: int32
          default: 6
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseMilestoneWithStats'
  /project/{project-id}/milestones/new:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
  /project/{project-id}/milestones/{milestone-ref}:
    get:
      parameters:
      - name: milestone-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MilestoneRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
  /project/{project-id}/milestones/{milestone-ref}/details:
    get:
      parameters:
      - name: milestone-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MilestoneRef'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MilestoneWithIssueBoardsStats'
  /project/{project-id}/milestones/{milestone-ref}/set-closed:
    post:
      parameters:
      - name: milestone-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MilestoneRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/milestones/{milestone-ref}/update-description:
    post:
      parameters:
      - name: milestone-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MilestoneRef'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                description:
                  type: string
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/milestones/{milestone-ref}/update-due-date:
    post:
      parameters:
      - name: milestone-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MilestoneRef'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                due-date:
                  type: string
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/milestones/{milestone-ref}/update-name:
    post:
      parameters:
      - name: milestone-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MilestoneRef'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/models:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Revision'
  /project/{project-id}/models-api:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelGET'
  /project/{project-id}/models/exports:
    get:
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/models/exports/mergabillity:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/Mergabillity'
  /project/{project-id}/models/exports/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/exports/{export}:
    get:
      parameters:
      - name: export
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/models/exports/{export}/dismiss:
    post:
      parameters:
      - name: export
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/models/exports/{export}/{format}:
    get:
      parameters:
      - name: export
        in: path
        required: true
        schema:
          type: string
      - name: format
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/models/model-select:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
  /project/{project-id}/models/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/query/{query-id}:
    get:
      parameters:
      - name: query-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/QueryRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}:
    get:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/models/{model}/image:
    get:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelRef'
      - name: size
        in: query
        schema:
          format: int32
          default: "600"
          type: integer
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/image/remove:
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/image/upload:
    get:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/name:
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                model-name:
                  type: string
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditNameResult'
  /project/{project-id}/models/{model}/reference:
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/remove:
    get:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/View'
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/submit:
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/transform:
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/upload:
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/{import}:
    post:
      parameters:
      - name: import
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/models/{model}/{import}/cancel:
    post:
      parameters:
      - name: import
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/models/{model}/{import}/dismiss:
    post:
      parameters:
      - name: import
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/notifications:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/notifications/settings:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/notifications/settings/mail/update-config:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/notifications/settings/slack/update-url:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/notifications/settings/{notification-plugin}/remove:
    post:
      parameters:
      - name: notification-plugin
        in: path
        required: true
        schema:
          type: string
      - name: continue
        in: query
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/notifications/settings/{notification-plugin}/remove/v2:
    post:
      parameters:
      - name: notification-plugin
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/notifications/settings/{notification-plugin}/when:
    post:
      parameters:
      - name: notification-plugin
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/notifications/settings/{notification-plugin}/where:
    post:
      parameters:
      - name: notification-plugin
        in: path
        required: true
        schema:
          type: string
      - name: continue
        in: query
        schema:
          type: string
      - name: enable
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/parse-markdown:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/products/relations:
    post:
      parameters:
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/products/relations/{revision}:
    get:
      parameters:
      - name: revision
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/project-libraries:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/project-libraries/{library-ref}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Library1'
  /project/{project-id}/project-members:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersResult'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembersResult'
  /project/{project-id}/qto:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtoGrid'
  /project/{project-id}/removed-members:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RemovedUserOrMember'
  /project/{project-id}/revisions:
    get:
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 10
          type: integer
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionList'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Revision'
  /project/{project-id}/revisions/{revision}:
    get:
      parameters:
      - name: revision
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/revisions/{revision}/download:
    get:
      parameters:
      - name: revision
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/revisions/{revision}/status:
    get:
      parameters:
      - name: revision
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
  /project/{project-id}/settings:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/settings/acl:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserAccessSettingsEntity'
  /project/{project-id}/settings/acl-settings:
    get:
      parameters:
      - name: acl-type
        in: query
        schema:
          $ref: '#/components/schemas/ProjectAclType'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullAcl'
    post:
      parameters:
      - name: acl-type
        in: query
        schema:
          $ref: '#/components/schemas/ProjectAclType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/options/coordinates:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/options/deleteproject:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/options/removeimage:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/options/set-length-unit:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/options/update:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/options/uploadimage:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/set-owner:
    post:
      responses:
        "200":
          description: OK
  /project/{project-id}/settings/storage:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentStorageStatus'
  /project/{project-id}/settings/update-name:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditNameResult'
  /project/{project-id}/share-link:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/spatial-structure:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/spatial-structure-standalone:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/star:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/teams/new:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: string
      responses:
        "200":
          description: OK
  /project/{project-id}/teams/{team-ref}/add:
    post:
      parameters:
      - name: team-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/teams/{team-ref}/remove:
    post:
      parameters:
      - name: team-ref
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserRef'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/tree/{revision}:
    get:
      parameters:
      - name: revision
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      - name: tree-type
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Template'
  /project/{project-id}/unstar:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/users:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUsersResult'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUsersResult'
  /project/{project-id}/viewer2d/default:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
  /project/{project-id}/viewer2d/rotation:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rotation'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "200":
          description: OK
  /project/{project-id}/visualization/{board}/{guid}/viewpoint/{viewpoint}:
    post:
      parameters:
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      - name: viewpoint
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ViewDataRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualizationViewData'
  /project/{project-id}/visualization/{board}/{guid}/{comment}:
    post:
      parameters:
      - name: comment
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueCommentRef'
      - name: guid
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IssueRef'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueBoardRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualizationViewData'
  /project/{project-id}/webhooks:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /project/{project-id}/work-plan:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/WorkPlanSelectComponentView'
    post:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/WorkPlanComponentView'
  /project/{project-id}/work-plans:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkPlan'
  /project/{project-id}/workspace{seg}:
    get:
      responses:
        "200":
          description: OK
  /project/{project-id}/{model}/{revision}/update-comment:
    post:
      parameters:
      - name: model
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ModelRef'
      - name: revision
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
  /projects:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  /react-view/project/{project-id}/{any}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactProjectView'
  /reset-password/{token}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /share/collections{any}:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ReactView'
  /share/screenshot/{token}:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /sharepoint/auth:
    get:
      parameters:
      - name: code
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /sharepoint/{project-id}/{library-ref}/children:
    get:
      parameters:
      - name: driveId
        in: query
        schema:
          type: string
      - name: path
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /sharepoint/{project-id}/{library-ref}/drives:
    get:
      parameters:
      - name: siteId
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /sharepoint/{project-id}/{library-ref}/renewaccess:
    get:
      responses:
        "200":
          description: OK
  /sharepoint/{project-id}/{library-ref}/revokeaccess:
    post:
      responses:
        "200":
          description: OK
  /sharepoint/{project-id}/{library-ref}/shared-folder:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharepointSharedFolder'
  /sharepoint/{project-id}/{library-ref}/sites:
    get:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LibraryRequest'
      responses:
        "200":
          description: OK
  /sharepoint/{project-id}/{library-ref}/{sharepoint-entry-id}/download:
    get:
      parameters:
      - name: sharepoint-entry-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CloudStorageEntryId'
      - name: preview
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /sharepoint/{project-id}/{library-ref}/{sharepoint-entry-id}/thumbnail:
    get:
      parameters:
      - name: sharepoint-entry-id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CloudStorageEntryId'
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /signin:
    get:
      parameters:
      - name: X-Atmosphere-Framework
        in: query
        schema:
          type: string
      - name: continue
        in: query
        schema:
          type: string
      - name: email
        in: query
        schema:
          type: string
      - name: redirect-signed-in
        in: query
        schema:
          type: string
      - name: token
        in: query
        schema:
          $ref: '#/components/schemas/InviteToken'
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: continue
        in: query
        schema:
          type: string
      - name: token
        in: query
        schema:
          $ref: '#/components/schemas/InviteToken'
      responses:
        "200":
          description: OK
  /signin-modal:
    get:
      parameters:
      - name: email
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
  /signout:
    get:
      responses:
        "200":
          description: OK
  /signup:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /signup/{sign-up-view}:
    get:
      parameters:
      - name: sign-up-view
        in: path
        required: true
        schema:
          pattern: .+
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /sso/provider:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityProviderParam'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityProviderResponse'
  /sso/saml/v2/attribute:
    get:
      parameters:
      - name: RelayState
        in: query
        schema:
          type: string
      - name: SAMLResponse
        in: query
        schema:
          type: string
      - name: Referer
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: Referer
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /storybook:
    get:
      responses:
        "200":
          description: OK
  /storybook/{segments}:
    get:
      parameters:
      - name: segments
        in: path
        required: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/PathSegment'
      responses:
        "200":
          description: OK
  /tos:
    get:
      parameters:
      - name: redirect
        in: query
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /tos-accept:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                accept-tos:
                  type: string
                redirect:
                  type: string
                token:
                  $ref: '#/components/schemas/InviteToken'
      responses:
        "200":
          description: OK
  /tos-content:
    get:
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/TosContentView'
  /translated-template:
    get:
      parameters:
      - name: template-id
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /translations:
    get:
      parameters:
      - name: language
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
  /unrestrictedhealth:
    get:
      responses:
        "200":
          description: OK
  /users:
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /v2/avatar/{encrypted-user-id}:
    get:
      parameters:
      - name: encrypted-user-id
        in: path
        required: true
        schema:
          type: string
      - name: size
        in: query
        schema:
          format: int32
          default: "32"
          type: integer
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/callback:
    post:
      parameters:
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/download:
    get:
      parameters:
      - name: id
        in: query
        schema:
          type: string
      - name: optimized
        in: query
        schema:
          type: string
      - name: range-status
        in: query
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      - name: Range
        in: header
        schema:
          type: string
      - name: Token
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
    head:
      parameters:
      - name: id
        in: query
        schema:
          type: string
      - name: range-status
        in: query
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      - name: Range
        in: header
        schema:
          type: string
      - name: Token
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/notifications:
    get:
      parameters:
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
  /v2/orgs:
    get:
      parameters:
      - name: include
        in: query
        schema:
          type: string
      - name: organizationRole
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: search
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/orgs/{organization-id}:
    get:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/orgs/{organization-id}/members:
    get:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: role
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      - name: user
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/orgs/{organization-id}/members/batch:
    post:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    parameters:
    - name: organization-id
      in: path
      required: true
      schema:
        type: string
  /v2/orgs/{organization-id}/members/suggest:
    get:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: includeUsersFromOwnedDomains
        in: query
        schema:
          type: boolean
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: search
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/orgs/{organization-id}/members/{user-id}:
    get:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/orgs/{organization-id}/project_members:
    get:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: organization-member
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: project
        in: query
        schema:
          type: string
      - name: role
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      - name: user
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/orgs/{organization-id}/project_members/batch:
    delete:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    parameters:
    - name: organization-id
      in: path
      required: true
      schema:
        type: string
  /v2/orgs/{organization-id}/projects:
    get:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: createdAtFrom
        in: query
        schema:
          type: string
      - name: createdAtTo
        in: query
        schema:
          type: string
      - name: expiration
        in: query
        schema:
          type: string
      - name: id
        in: query
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revisions
        in: query
        schema:
          default: none
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      - name: updatedAtFrom
        in: query
        schema:
          type: string
      - name: updatedAtTo
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: models-as-documents
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/orgs/{organization-id}/projects/batch:
    delete:
      parameters:
      - name: organization-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    parameters:
    - name: organization-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects:
    get:
      parameters:
      - name: createdAtFrom
        in: query
        schema:
          type: string
      - name: createdAtTo
        in: query
        schema:
          type: string
      - name: expiration
        in: query
        schema:
          type: string
      - name: id
        in: query
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: includeProjectSettings
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revisions
        in: query
        schema:
          default: none
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      - name: updatedAtFrom
        in: query
        schema:
          type: string
      - name: updatedAtTo
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: include
        in: query
        schema:
          type: string
      - name: includeProjectSettings
        in: query
        schema:
          type: string
      - name: models-as-documents
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: includeProjectSettings
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: includeProjectSettings
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/custom-fields:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: archived
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/custom-fields/{custom-field-id}:
    get:
      parameters:
      - name: custom-field-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: custom-field-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/custom-fields/{custom-field-id}/enumeration-items:
    get:
      parameters:
      - name: custom-field-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: disabled
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    parameters:
    - name: custom-field-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/ifc/classification_references:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/classification_references/relations:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/classification_references/{object-id}:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/classification_references/{object-id}/relations:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/classifications:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/classifications/{object-id}:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/classifications/{object-id}/relations:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/groups:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: ifcType
        in: query
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/groups/ifctypes:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/groups/relations:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/groups/{object-id}:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/groups/{object-id}/relations:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/layers:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: ifcType
        in: query
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/layers/ifctypes:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/layers/relations:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/layers/{object-id}:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/layers/{object-id}/relations:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/ownerhistory:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/ownerhistory/{object-id}:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/products:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: ifcType
        in: query
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: lengthUnit
        in: query
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: X-Index-Mode
        in: header
        schema:
          $ref: '#/components/schemas/IndexModeEntity'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/products/bounding-box:
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/products/fields:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 1000
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: X-Index-Mode
        in: header
        schema:
          $ref: '#/components/schemas/IndexModeEntity'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/products/ifctypes:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/products/relations:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/products/{object-id}:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/products/{object-id}/relations:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/types:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: ifcType
        in: query
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/types/ifctypes:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/types/relations:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/types/{object-id}:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/ifc/types/{object-id}/relations:
    get:
      parameters:
      - name: object-id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/image:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: size
        in: query
        schema:
          format: int32
          default: "400"
          type: integer
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/issues/boards/custom-fields:
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/issues/boards/custom-fields/sum:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/issues/boards/{board-id}:
    get:
      parameters:
      - name: board-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: includeCustomFields
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: board-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      schema:
        type: string
    - name: includeCustomFields
      in: query
      schema:
        type: string
  /v2/projects/{project-id}/labels:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: includeGroup
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/labels/batch:
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: deleteInUse
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    parameters:
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      schema:
        type: string
  /v2/projects/{project-id}/labels/label-groups:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: search
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/labels/label-groups/batch:
    delete:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/labels/label-groups/{group-id}:
    get:
      parameters:
      - name: group-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: group-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: group-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/labels/statistics:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: ids
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/labels/statistics/group:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/labels/{label-id}:
    get:
      parameters:
      - name: label-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: label-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: deleteInUse
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: label-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      schema:
        type: string
  /v2/projects/{project-id}/labels/{label-id}/merge:
    post:
      parameters:
      - name: label-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    parameters:
    - name: label-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      schema:
        type: string
  /v2/projects/{project-id}/libraries:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: createdAtFrom
        in: query
        schema:
          type: string
      - name: createdAtTo
        in: query
        schema:
          type: string
      - name: createdBy
        in: query
        schema:
          type: string
      - name: fields
        in: query
        schema:
          type: string
      - name: files
        in: query
        schema:
          type: string
      - name: finalized
        in: query
        schema:
          type: string
      - name: finalizedState
        in: query
        schema:
          type: string
      - name: followLatestRevision
        in: query
        schema:
          type: string
      - name: followers
        in: query
        schema:
          type: string
      - name: libraryItems
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: search
        in: query
        schema:
          type: string
      - name: sharedBy
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      - name: visibility
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: collection-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/collections/{collection-id}/copy:
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    parameters:
    - name: collection-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/collections/{collection-id}/events:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: createdAtFrom
        in: query
        schema:
          type: string
      - name: createdAtTo
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/followers:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/followers/{user-id}:
    delete:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/items:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: libraryItemInclude
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/items/{item-id}:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/request-zip:
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: accept
        in: query
        schema:
          type: string
      - name: ignore-missing-files
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: collection-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/collections/{collection-id}/shared-zip-status:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: collection-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/collections/{collection-id}/sharings:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/sharings/{share-id}:
    get:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: share-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/sharings/{share-id}/resend:
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: share-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/sharings/{share-id}/revoke:
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: share-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/sharings/{share-id}/unrevoke:
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: share-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/collections/{collection-id}/update-versions:
    post:
      parameters:
      - name: collection-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: fields
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: collection-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}:
    get:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: library-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}/acl-overview:
    get:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/acl-overview/{library-item-id}/{user-id}:
    get:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: library-item-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items:
    get:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: includeLabel
        in: query
        schema:
          type: string
        deprecated: true
      - name: includeLabelGroup
        in: query
        schema:
          type: string
        deprecated: true
      - name: includePath
        in: query
        schema:
          type: string
        deprecated: true
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: Bimsync-Params
        in: header
        schema:
          $ref: '#/components/schemas/NewLibraryItemEntity'
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/batch:
    delete:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    parameters:
    - name: library-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}/items/custom-fields/context:
    post:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/custom-fields/sum:
    post:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/list:
    post:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}:
    get:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: includeLabel
        in: query
        schema:
          type: string
      - name: includeLabelGroup
        in: query
        schema:
          type: string
      - name: includePath
        in: query
        schema:
          type: string
      - name: accept
        in: query
        schema:
          type: string
      - name: format
        in: query
        schema:
          type: string
      - name: Range
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: item-id
      in: path
      required: true
      schema:
        type: string
    - name: library-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      schema:
        type: string
    - name: includeLabel
      in: query
      schema:
        type: string
    - name: includeLabelGroup
      in: query
      schema:
        type: string
    - name: includePath
      in: query
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/associations:
    get:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: model
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: revision
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/drafts/{draft-id}/token:
    post:
      parameters:
      - name: draft-id
        in: path
        required: true
        schema:
          type: string
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: format
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/naming-conventions/validate-all-files:
    get:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/revisions:
    get:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: Bimsync-Params
        in: header
        schema:
          $ref: '#/components/schemas/CreateLibraryItemRevision'
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/revisions/{revision-id}:
    get:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision-id
        in: path
        required: true
        schema:
          type: string
      - name: accept
        in: query
        schema:
          type: string
      - name: format
        in: query
        schema:
          type: string
      - name: Range
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: item-id
      in: path
      required: true
      schema:
        type: string
    - name: library-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: revision-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/revisions/{revision-id}/download:
    get:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision-id
        in: path
        required: true
        schema:
          type: string
      - name: accept
        in: query
        schema:
          type: string
      - name: format
        in: query
        schema:
          type: string
      - name: Range
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: item-id
      in: path
      required: true
      schema:
        type: string
    - name: library-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: revision-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/revisions/{revision-id}/token:
    post:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision-id
        in: path
        required: true
        schema:
          type: string
      - name: accept
        in: query
        schema:
          type: string
      - name: format
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: item-id
      in: path
      required: true
      schema:
        type: string
    - name: library-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: revision-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}/items/{item-id}/token:
    post:
      parameters:
      - name: item-id
        in: path
        required: true
        schema:
          type: string
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: accept
        in: query
        schema:
          type: string
      - name: format
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: item-id
      in: path
      required: true
      schema:
        type: string
    - name: library-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: include
      in: query
      schema:
        type: string
    - name: includeLabel
      in: query
      schema:
        type: string
    - name: includeLabelGroup
      in: query
      schema:
        type: string
    - name: includePath
      in: query
      schema:
        type: string
  /v2/projects/{project-id}/libraries/{library-id}/settings:
    get:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: library-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/members:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: userType
        in: query
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/members/{user-id}:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/models:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: query
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: noAccess
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: search
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/models/default-folder:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/models/exports/{export-id}:
    get:
      parameters:
      - name: export-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/models/{model-id}:
    get:
      parameters:
      - name: model-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: normalize
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: model-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: model-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/models/{model-id}/image:
    get:
      parameters:
      - name: model-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: size
        in: query
        schema:
          format: int32
          default: "400"
          type: integer
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: model-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: Transformation
        in: header
        schema:
          $ref: '#/components/schemas/UploadModelImageTransformationEntity'
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: model-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/models/{model-id}/transform:
    put:
      parameters:
      - name: model-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/naming-conventions:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: archived
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/naming-conventions/{naming-convention-id}:
    get:
      parameters:
      - name: naming-convention-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: naming-convention-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: naming-convention-id
      in: path
      required: true
      schema:
        type: string
    - name: project-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/naming-conventions/{naming-convention-id}/blocks/{naming-convention-block-id}:
    delete:
      parameters:
      - name: naming-convention-block-id
        in: path
        required: true
        schema:
          type: string
      - name: naming-convention-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/naming-conventions/{naming-convention-id}/validate:
    post:
      parameters:
      - name: naming-convention-id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/revision_status:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/revision_status/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/revisions:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: query
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: model
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: product
        in: query
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: Bimsync-Params
        in: header
        schema:
          $ref: '#/components/schemas/CreateRevisionEntity'
      requestBody:
        content:
          application/ifc:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
          application/ifczip:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
          application/ifcxml:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    options:
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/revisions/{revision-id}:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision-id
        in: path
        required: true
        schema:
          type: string
      - name: include
        in: query
        schema:
          type: string
      - name: normalize
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/revisions/{revision-id}/download:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision-id
        in: path
        required: true
        schema:
          type: string
      - name: normalize
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/selections_2d:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/spatial_structure:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/teams:
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/teams/{team-id}:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: team-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: team-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: project-id
      in: path
      required: true
      schema:
        type: string
    - name: team-id
      in: path
      required: true
      schema:
        type: string
  /v2/projects/{project-id}/teams/{team-id}/members:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: team-id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: team-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/teams/{team-id}/members/{user-id}:
    delete:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: team-id
        in: path
        required: true
        schema:
          type: string
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer2d/data:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer2d/geometry:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: index
        in: query
        schema:
          format: int32
          default: "0"
          type: integer
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer2d/token:
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
    options:
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer3d/data:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      - name: query
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
    options:
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer3d/geometry:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: index
        in: query
        schema:
          format: int32
          default: "0"
          type: integer
      - name: token
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: token
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer3d/tiles/{revision-id}/{file}:
    get:
      parameters:
      - name: file
        in: path
        required: true
        schema:
          type: string
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: revision-id
        in: path
        required: true
        schema:
          type: string
      - name: Bimsync-Token
        in: header
        schema:
          type: string
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer3d/token:
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    options:
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/viewer3d/token/{token}:
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/webhooks/user:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      responses:
        "200":
          description: OK
    post:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrincipalAuthenticator'
      responses:
        "200":
          description: OK
  /v2/projects/{project-id}/webhooks/user/{webhook-id}:
    get:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: webhook-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: webhook-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: project-id
        in: path
        required: true
        schema:
          type: string
      - name: webhook-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/scim/v2/ResourceTypes:
    get:
      responses:
        "200":
          description: OK
  /v2/scim/v2/Schemas:
    get:
      responses:
        "200":
          description: OK
  /v2/scim/v2/Schemas/urn:ietf:params:scim:schemas:core:2.0:Group:
    get:
      responses:
        "200":
          description: OK
  /v2/scim/v2/Schemas/urn:ietf:params:scim:schemas:core:2.0:User:
    get:
      responses:
        "200":
          description: OK
  /v2/scim/v2/Schemas/urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
    get:
      responses:
        "200":
          description: OK
  /v2/scim/v2/ServiceProviderConfig:
    get:
      responses:
        "200":
          description: OK
  /v2/scim/v2/Users:
    get:
      parameters:
      - name: count
        in: query
        schema:
          format: int32
          default: "100"
          type: integer
      - name: filter
        in: query
        schema:
          type: string
      - name: startIndex
        in: query
        schema:
          format: int32
          default: "1"
          type: integer
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
  /v2/scim/v2/Users/{id}:
    get:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    put:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
  /v2/share/collections/{token}:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/share/collections/{token}/download:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/user:
    get:
      responses:
        "200":
          description: OK
    put:
      responses:
        "200":
          description: OK
  /v2/user/jwt/status/{code}:
    get:
      parameters:
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /v2/user/starred_projects:
    get:
      parameters:
      - name: include
        in: query
        schema:
          type: string
      - name: includeProjectSettings
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: revisions
        in: query
        schema:
          default: none
          type: string
      responses:
        "200":
          description: OK
  /v2/users:
    get:
      parameters:
      - name: page
        in: query
        schema:
          format: int32
          default: 1
          type: integer
      - name: pageSize
        in: query
        schema:
          format: int32
          default: 100
          type: integer
      - name: username
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
    post:
      responses:
        "200":
          description: OK
  /v2/users/{user-id}:
    get:
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
    delete:
      parameters:
      - name: user-id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /view/{token}:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/View'
  /view/{token}/image:
    get:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      - name: size
        in: query
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: OK
  /view/{token}/products/relations:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /view/{token}/products/relations/{revision}:
    get:
      parameters:
      - name: revision
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RevisionRef'
      - name: token
        in: path
        required: true
        schema:
          type: string
      - name: If-None-Match
        in: header
        schema:
          type: string
      responses:
        "200":
          description: OK
  /view/{token}/revisions:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleUser'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Revision'
  /view/{token}/viewer3d/geometry/{index}:
    get:
      parameters:
      - name: index
        in: path
        required: true
        schema:
          format: int32
          default: "0"
          type: integer
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /view/{token}/visualization:
    post:
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisualizationViewData'
  /viewer2d/{project-ref}:
    get:
      parameters:
      - name: revision-ref
        in: query
        schema:
          $ref: '#/components/schemas/RevisionRef'
      responses:
        "200":
          description: OK
components:
  schemas:
    Acl:
      type: object
      properties:
        read:
          type: boolean
        write:
          type: boolean
        editAcl:
          type: boolean
        extensions:
          type: array
          items:
            $ref: '#/components/schemas/AclExtension'
    AclExtension:
      type: object
      properties:
        type:
          type: string
        checked:
          type: boolean
    AclId:
      type: object
      properties:
        value:
          format: int32
          type: integer
    AclItemDetails:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/Translatable'
        iconClasses:
          type: string
        iconType:
          type: string
        updated:
          format: int64
          type: integer
        updatedBy:
          $ref: '#/components/schemas/Contact'
        owner:
          $ref: '#/components/schemas/Contact'
        itemDescription:
          type: string
    AclModalSettings:
      type: object
      properties:
        aclSettings:
          $ref: '#/components/schemas/AclSettings'
        aclData:
          $ref: '#/components/schemas/FullAcl'
        triggerText:
          type: string
        aclUpdateUrl:
          format: uri
          type: string
    AclScope:
      enum:
      - READ
      - WRITE
      - EDIT_ACL
      type: string
    AclScope1:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AclScopeType'
        text:
          type: string
        description:
          type: string
    AclScopeType:
      enum:
      - NO_ACCESS
      - READ
      - WRITE
      - EDIT_ACL
      type: string
    AclSettings:
      type: object
      properties:
        triggerText:
          type: string
        aclUpdateUrl:
          format: uri
          type: string
        renderOwner:
          type: boolean
        aclItemDetails:
          $ref: '#/components/schemas/AclItemDetails'
        toggleMode:
          type: boolean
    ActionComponentData:
      type: object
      properties:
        actionGuid:
          type: string
        models:
          type: object
          additionalProperties:
            type: array
            items:
              format: int64
              type: integer
        ifcGuids:
          type: array
          items:
            type: string
        name:
          type: string
        color:
          type: string
    ActionData:
      type: object
      properties:
        guid:
          type: string
        actionType:
          type: string
        previousActionGuid:
          type: string
    ActionInfoData:
      type: object
      properties:
        action:
          type: array
          items:
            $ref: '#/components/schemas/ActionData'
        actionComponent:
          type: array
          items:
            $ref: '#/components/schemas/ActionComponentData'
    ActivateStatusWorkflowEntity:
      type: object
      properties:
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/DocumentStatusModel'
    AggregatedAcl:
      type: object
      properties:
        cardSubTitle:
          type: string
        cardTitle:
          type: string
        multiple:
          type: boolean
        multipleOwners:
          type: boolean
        stage:
          $ref: '#/components/schemas/FeatureStage'
        aclModalSettings:
          $ref: '#/components/schemas/AclModalSettings'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/AclScope1'
    Alert:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/Translatable'
        message:
          $ref: '#/components/schemas/Translatable'
        type:
          type: string
        alertClasses:
          type: string
        dataCy:
          type: string
        visible:
          type: boolean
    AlertId:
      type: object
      properties:
        value:
          format: int32
          type: integer
    AlertType:
      enum:
      - SUCCESS
      - WARNING
      - ERROR
      - INFO
      type: string
    AnnotatedIssue:
      type: object
      properties:
        issueNumber:
          format: int32
          type: integer
        annotatedCommentCount:
          format: int32
          type: integer
    Annotation:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        xfdfString:
          type: string
        pageNumber:
          format: int32
          type: integer
    AppCredentials:
      type: object
      properties:
        name:
          type: string
        redirectUri:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        appUrl:
          format: uri
          type: string
    ApprovalEventEntity:
      type: object
      properties:
        id:
          type: string
        approvalRequestId:
          type: string
        fileId:
          type: string
        createdAt:
          format: int64
          type: integer
        type:
          type: string
        byUserId:
          type: string
        data:
          type: object
          additionalProperties: {}
    ApprovalFileEntity:
      type: object
      properties:
        id:
          type: string
        libraryItem:
          $ref: '#/components/schemas/LibraryItem'
        candidateFile:
          $ref: '#/components/schemas/LibraryItemFile'
        currentFile:
          $ref: '#/components/schemas/LibraryItemFile'
        state:
          $ref: '#/components/schemas/ApprovalFileStateEntity'
        lastResponse:
          $ref: '#/components/schemas/ApprovalResponseEntity'
        issueNumber:
          format: int32
          type: integer
    ApprovalFileStateEntity:
      type: object
      properties:
        userStates:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalFileUserStateEntity'
        aggregatedState:
          type: string
    ApprovalFileUserStateEntity:
      type: object
      properties:
        userId:
          type: string
        state:
          type: string
        date:
          format: int64
          type: integer
    ApprovalFileWithEventsEntity:
      type: object
      properties:
        id:
          type: string
        libraryItem:
          $ref: '#/components/schemas/LibraryItem'
        candidateFile:
          $ref: '#/components/schemas/LibraryItemFile'
        currentFile:
          $ref: '#/components/schemas/LibraryItemFile'
        state:
          $ref: '#/components/schemas/ApprovalFileStateEntity'
        lastResponse:
          $ref: '#/components/schemas/ApprovalResponseEntity'
        issueNumber:
          format: int32
          type: integer
        events:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalEventEntity'
    ApprovalImageRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    ApprovalPublishOptionsEntity:
      type: object
      properties:
        approved:
          $ref: '#/components/schemas/FileReviewStateOptionsEntity'
        approvedWithComments:
          $ref: '#/components/schemas/FileReviewStateOptionsEntity'
        pending:
          $ref: '#/components/schemas/FileReviewStateOptionsEntity'
        rejected:
          $ref: '#/components/schemas/FileReviewStateOptionsEntity'
    ApprovalRequestEntity:
      type: object
      properties:
        id:
          type: string
        requestNumber:
          format: int32
          type: integer
        projectId:
          type: string
        title:
          type: string
        description:
          type: string
        descriptionHtml:
          type: string
        createdById:
          type: string
        createdAt:
          type: string
        publisher:
          $ref: '#/components/schemas/Assignee'
        deadline:
          $ref: '#/components/schemas/Deadline'
        state:
          type: string
        reviewers:
          uniqueItems: true
          type: array
          items:
            type: string
        minimumReviewers:
          format: int32
          type: integer
    ApprovalRequestEventsEntity:
      type: object
      properties:
        events:
          $ref: '#/components/schemas/PaginatedResponseApprovalEventEntity'
        files:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ApprovalFileEntity'
    ApprovalResponseAnnotationsEntity:
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        responseId:
          type: string
    ApprovalResponseEntity:
      type: object
      properties:
        id:
          type: string
        reviewedByUserId:
          type: string
        reviewedAt:
          format: int64
          type: integer
        comment:
          type: string
        commentHtml:
          type: string
        visualization:
          $ref: '#/components/schemas/ApprovalResponseVisualizationEntity'
        currentFileId:
          type: string
        version:
          format: int32
          type: integer
        responseType:
          type: string
    ApprovalResponseViewdataEntity:
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        imageId:
          type: string
    ApprovalResponseVisualizationEntity:
      type: object
      properties:
        viewDatas:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalResponseViewdataEntity'
    ApprovalSettingsEntity:
      type: object
      properties:
        updatedAt:
          type: string
        updatedBy:
          type: string
        publishOptions:
          $ref: '#/components/schemas/ApprovalPublishOptionsEntity'
    AppsResponse:
      type: object
      properties:
        linkedApps:
          type: array
          items:
            $ref: '#/components/schemas/LinkedApp'
        myApps:
          type: array
          items:
            $ref: '#/components/schemas/AppCredentials'
    ArenaViewContext:
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/ViewConfiguration'
        reporter:
          type: object
          allOf:
          - $ref: '#/components/schemas/Reporter'
          writeOnly: true
        renderer:
          $ref: '#/components/schemas/ViewRenderer'
        uriInfo:
          $ref: '#/components/schemas/UriInfo'
        requestCache:
          $ref: '#/components/schemas/ObjectCache'
        singlePageAppRequest:
          type: boolean
        singlePageAppVersion:
          type: string
        isPartialView:
          type: boolean
        pushProvider:
          $ref: '#/components/schemas/PushProvider'
        productionAssets:
          $ref: '#/components/schemas/ProductionAssets'
        pushUrl:
          type: string
        development:
          type: boolean
        developmentXSRF:
          type: boolean
        developmentAnalyticsEnabled:
          type: boolean
        analyticsEnabled:
          type: boolean
        intercomEnabled:
          type: boolean
        developmentJs:
          type: array
          items:
            $ref: '#/components/schemas/Script'
        developmentLess:
          type: string
        webpackCss:
          type: array
          items:
            type: string
        developmentCss:
          type: array
          items:
            type: string
        productionJs:
          type: array
          items:
            type: string
        productionCss:
          type: array
          items:
            type: string
        partialView:
          type: boolean
    Assignee:
      type: object
      properties:
        userId:
          type: string
        teamId:
          type: string
    AuthenticatorSetupResponse:
      type: object
      properties:
        imgSrc:
          type: string
        secret:
          type: string
    BCFImageRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    BoardInfo:
      type: object
      properties:
        boardName:
          type: string
        archivedBoard:
          type: boolean
        writeAccess:
          type: boolean
    BookmarkEntity:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        imageUrl:
          format: uri
          type: string
        updateTime:
          format: int64
          type: integer
        createdTime:
          format: int64
          type: integer
        createdBy:
          type: string
        modelRevisions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ModelRevision'
        documents:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/DocumentReferenceEntity'
        sharedWithProject:
          type: boolean
        starred:
          type: boolean
        viewpoint:
          $ref: '#/components/schemas/Viewpoint'
        copiedFromBookmarkId:
          type: string
        myCopyOfBookmarkId:
          type: string
        shareSettings:
          $ref: '#/components/schemas/BookmarkShareSettingsEntity'
    BookmarkRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    BookmarkShareSettingsEntity:
      type: object
      properties:
        expiresTime:
          format: int64
          type: integer
        enabled:
          type: boolean
        publicUrl:
          format: uri
          type: string
        sharedWorkPlans:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/WorkPlanRef'
        updatedBy:
          type: string
        updatedTime:
          format: int64
          type: integer
    BreadcrumbAction:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/Translatable'
        icon:
          type: string
        url:
          format: uri
          type: string
        modal:
          $ref: '#/components/schemas/OptionalBreadcrumbModal'
        filePicker:
          $ref: '#/components/schemas/OptionalBreadcrumbFilePicker'
        data:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbData'
        classes:
          type: string
        dropdownActions:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbAction'
        pjax:
          type: boolean
        targetBlank:
          type: boolean
        download:
          type: boolean
        group:
          type: boolean
        divider:
          type: boolean
        selected:
          type: boolean
        onlyViewerMode:
          type: boolean
        disabled:
          type: boolean
        alphaOnly:
          type: boolean
        adminOnly:
          type: boolean
        withReactComponent:
          type: boolean
        reactComponentId:
          type: string
        dataCy:
          type: string
        reactData:
          type: string
    BreadcrumbActions:
      type: object
      properties:
        border:
          type: boolean
        primary:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbAction'
        secondary:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbAction'
        tertiary:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbAction'
        viewerMode:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbAction'
        empty:
          type: boolean
    BreadcrumbData:
      type: object
      properties:
        key:
          type: string
        value: {}
        valueJson:
          type: string
    BreadcrumbDropdown:
      type: object
      properties:
        selectedText:
          type: string
        translateSelectedText:
          type: boolean
        dropdownItems:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbAction'
    BreadcrumbDropdownMenu:
      type: object
      properties:
        id:
          type: string
        title:
          $ref: '#/components/schemas/Translatable'
        icon:
          type: string
        href:
          format: uri
          type: string
        menuList:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbDropdownMenu'
    BreadcrumbItem:
      type: object
      properties:
        ref:
          type: string
        title:
          $ref: '#/components/schemas/Translatable'
        icon:
          type: string
        href:
          format: uri
          type: string
        subItems:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbItem'
    Breadcrumbs:
      type: object
      properties:
        root:
          $ref: '#/components/schemas/BreadcrumbItem'
        trail:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbItem'
    CandidateLibrary:
      type: object
      properties:
        plugin:
          $ref: '#/components/schemas/LibraryPlugin'
        newLibraryUrl:
          type: string
        name:
          type: string
    ChangeType:
      enum:
      - CREATED
      - UPDATED
      - NONE
      type: string
    Chart:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        error:
          $ref: '#/components/schemas/ChartError'
    ChartError:
      type: object
      properties:
        message:
          type: string
        detail:
          type: string
    ChartWrapper:
      type: object
      properties:
        chart:
          $ref: '#/components/schemas/Chart'
    ChildrenRequest:
      type: object
      properties:
        url:
          format: uri
          type: string
        backlinkUrl:
          format: uri
          type: string
        postData:
          $ref: '#/components/schemas/LibraryItemsParam'
        backlinkActive:
          type: boolean
        totalCount:
          format: int64
          type: integer
    Classification:
      type: object
      properties:
        description:
          type: string
        identification:
          type: string
    ClassificationLibraryGET:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/LibraryRef'
        name:
          type: string
        edition:
          type: string
        editionDate:
          type: string
        source:
          type: string
    Client:
      type: object
      properties:
        ref:
          type: string
    ClientFileEntity:
      type: object
      properties:
        sessionFileId:
          type: string
        fileName:
          type: string
        requestedItemId:
          type: string
    Clipping:
      type: object
      properties:
        shape:
          $ref: '#/components/schemas/Shape'
    ClippingPlane:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Point'
        direction:
          $ref: '#/components/schemas/Direction'
    Clock:
      type: object
    CloudStorageEntryId:
      type: object
      properties:
        value:
          type: string
    CobuilderSessionEntity:
      type: object
      properties:
        username:
          type: string
        sessionId:
          type: string
    CobuilderWorkplaceEntity:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
    CollectionFileEntity:
      type: object
      properties:
        id:
          type: string
        libraryItemAndFile:
          $ref: '#/components/schemas/LibraryItemAndFile'
    CommentAnnotation:
      type: object
      properties:
        identifier:
          $ref: '#/components/schemas/CommentAnnotationIdentifier'
        annotation:
          $ref: '#/components/schemas/Annotation'
    CommentAnnotationIdentifier:
      type: object
      properties:
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        issueBoardRef:
          $ref: '#/components/schemas/IssueBoardRef'
        issueNumber:
          format: int32
          type: integer
        commentRef:
          $ref: '#/components/schemas/IssueCommentRef'
        libraryRef:
          $ref: '#/components/schemas/LibraryRef'
        libraryItemRef:
          $ref: '#/components/schemas/LibraryItemRef'
        fileId:
          type: string
        compareFileId:
          type: string
        compareOpacity:
          format: double
          type: number
        compareFirstColor:
          type: string
        compareSecondColor:
          type: string
        revisionVersion:
          format: int32
          type: integer
        compareRevisionVersion:
          format: int32
          type: integer
    Configuration:
      type: object
      properties:
        documents:
          $ref: '#/components/schemas/DocumentConfiguration'
    Contact:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    ContextId:
      enum:
      - COBUILDER_SYNC
      - BSDD_AUTO_SUGGEST
      - UPLOAD_DOCUMENT
      - APPROVALS
      - COLLECTIONS
      - NEW_FOLDER
      - UPLOAD_ZIP
      - MY_ZIP_UPLOADS
      - SETTINGS
      - NEW_LIBRARY
      - NEW_DOCUMENT_LIBRARY
      - UPLOAD_CSV
      - NEW_URL
      - LIBRARY_ACL_OVERVIEW
      type: string
    ContextMenu:
      type: object
      properties:
        menuItems:
          type: array
          items:
            $ref: '#/components/schemas/ContextMenuItem'
    ContextMenuItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ContextId'
        contextTier:
          $ref: '#/components/schemas/ContextTier'
        data: {}
    ContextTier:
      enum:
      - PRIMARY
      - SECONDARY
      - TERTIARY
      type: string
    CoreIssueBoardRequest:
      type: object
      properties:
        member:
          $ref: '#/components/schemas/ProjectMember'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole'
        user:
          $ref: '#/components/schemas/User1'
        userRef:
          $ref: '#/components/schemas/UserRef'
        requestType:
          $ref: '#/components/schemas/UserRequestType'
        onBehalfOfOrganization:
          $ref: '#/components/schemas/OptionalUser'
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
        notificationsDisabled:
          type: boolean
        project:
          $ref: '#/components/schemas/Project1'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        issueBoard:
          $ref: '#/components/schemas/IssueBoard'
        issueBoardRef:
          $ref: '#/components/schemas/IssueBoardRef'
        grantedIssueBoardScope:
          $ref: '#/components/schemas/AclScope'
        grantedIssueBoardAccess:
          $ref: '#/components/schemas/GrantedIssueBoardAccess'
    CoreLibraryRequest:
      type: object
      properties:
        member:
          $ref: '#/components/schemas/ProjectMember'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole'
        user:
          $ref: '#/components/schemas/User1'
        userRef:
          $ref: '#/components/schemas/UserRef'
        requestType:
          $ref: '#/components/schemas/UserRequestType'
        onBehalfOfOrganization:
          $ref: '#/components/schemas/OptionalUser'
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
        notificationsDisabled:
          type: boolean
        project:
          $ref: '#/components/schemas/Project1'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        library:
          $ref: '#/components/schemas/Library'
        libraryRef:
          $ref: '#/components/schemas/LibraryRef'
    CoreProjectRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User1'
        userRef:
          $ref: '#/components/schemas/UserRef'
        requestType:
          $ref: '#/components/schemas/UserRequestType'
        onBehalfOfOrganization:
          $ref: '#/components/schemas/OptionalUser'
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
        notificationsDisabled:
          type: boolean
        project:
          $ref: '#/components/schemas/Project1'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        member:
          $ref: '#/components/schemas/ProjectMember'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole'
    CoreUserRequest:
      type: object
      properties:
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
        notificationsDisabled:
          type: boolean
        user:
          $ref: '#/components/schemas/User1'
        userRef:
          $ref: '#/components/schemas/UserRef'
        requestType:
          $ref: '#/components/schemas/UserRequestType'
        onBehalfOfOrganization:
          $ref: '#/components/schemas/OptionalUser'
    CreateLibraryItemRevision:
      type: object
      properties:
        name:
          type: string
    CreateQueryFilterItem:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/FilterItemType'
        label:
          $ref: '#/components/schemas/FilterLabel'
        selected:
          type: boolean
    CreateRevisionEntity:
      type: object
      properties:
        model:
          type: string
        comment:
          type: string
        filename:
          type: string
        callbackUri:
          type: string
    CreateUserPOST:
      type: object
      properties:
        questionnaire:
          $ref: '#/components/schemas/QuestionnaireParam'
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        retypedPassword:
          type: string
        tosAccepted:
          type: boolean
        newsletterSubscribed:
          type: boolean
    CurrentIssueAssignee:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/IssueContactEntity'
        teamId:
          type: string
    CurrentMember:
      type: object
      properties:
        projectId:
          type: string
        userId:
          type: string
        role:
          type: string
        aggregatedRole:
          type: string
    CurrentUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        ref:
          $ref: '#/components/schemas/UserRef'
        shortRef:
          type: string
        hasAvatar:
          type: boolean
        avatarETag:
          type: string
        userType:
          $ref: '#/components/schemas/UserType'
        createdAt:
          format: int64
          type: integer
        organization:
          type: boolean
        team:
          type: boolean
        avatarUrl:
          format: uri
          type: string
        initials:
          type: string
        user:
          type: boolean
        unlinked:
          type: boolean
        id:
          type: string
        bimsyncInternal:
          type: boolean
        bimsyncAlpha:
          type: boolean
    CustomAclCondition:
      type: object
      properties:
        conditionId:
          type: string
        acl:
          $ref: '#/components/schemas/Acl'
        label:
          $ref: '#/components/schemas/Translatable'
        helpText:
          $ref: '#/components/schemas/Translatable'
        hideAcl:
          type: boolean
        enabledByExtensionTypes:
          type: array
          items:
            type: string
    CustomAclRule:
      type: object
      properties:
        extensionType:
          type: string
        enabled:
          type: boolean
        label:
          $ref: '#/components/schemas/Translatable'
        helpText:
          $ref: '#/components/schemas/Translatable'
        defaultEnabledRead:
          type: boolean
        canModifyRead:
          type: boolean
        defaultEnabledWrite:
          type: boolean
        canModifyWrite:
          type: boolean
    CustomFieldInstance:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/CustomFieldRef'
        type:
          $ref: '#/components/schemas/CustomFieldType'
        defaultValue: {}
        required:
          type: boolean
        disabled:
          type: boolean
    CustomFieldRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    CustomFieldType:
      enum:
      - TEXT
      - INTEGER
      - DOUBLE
      - ENUMERATION
      - DATE
      type: string
    DashboardApprovalsReact:
      type: object
      properties:
        lastPendingApprovals:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalRequestEntity'
        pendingCount:
          format: int64
          type: integer
        createdByMeCount:
          format: int64
          type: integer
        reviewByMeCount:
          format: int64
          type: integer
    DashboardIssuesReact:
      type: object
      properties:
        recentlyUpdatedIssues:
          type: array
          items:
            $ref: '#/components/schemas/IssueReact'
        assignedIssuesCount:
          format: int64
          type: integer
        openIssuesCount:
          format: int64
          type: integer
        issueBoardStatistics:
          type: array
          items:
            $ref: '#/components/schemas/IssueBoardWithStats'
        issuesUrl:
          format: uri
          type: string
        assignedIssuesUrl:
          format: uri
          type: string
        openIssuesUrl:
          format: uri
          type: string
        chartIssueResolutionTimeUrl:
          format: uri
          type: string
        recentlyUpdatedIssuesUrl:
          format: uri
          type: string
    DateFormat:
      type: object
      properties:
        format:
          type: string
        showRelativeDate:
          type: boolean
    Deadline:
      type: object
      properties:
        dueDate:
          type: string
        milestoneId:
          type: string
    DefaultDocumentStatusModel:
      type: object
      properties:
        type:
          type: string
        statusRef:
          type: string
        createRevisionByDefault:
          type: boolean
    DeleteCommentAndViewpointEntity:
      type: object
      properties:
        deletedViewpoints:
          type: array
          items:
            type: string
        deletedComments:
          type: array
          items:
            type: string
        unlinkedComments:
          type: array
          items:
            type: string
    DeleteItemErrorType:
      enum:
      - UNAUTHORIZED
      - MODELS_AS_DOCUMENTS_UNAUTHORIZED
      - FOLDER_CONTENT_UNAUTHORIZED
      - IS_MODEL
      type: string
    DeleteItemsResultLibraryItem:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              item:
                $ref: '#/components/schemas/LibraryItem'
              type:
                $ref: '#/components/schemas/DeleteItemErrorType'
        items:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
    DeleteLibraryItemsModel:
      type: object
      properties:
        libraryRef:
          type: string
        executeUrl:
          format: uri
          type: string
        libraryItems:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
    DeleteLibraryItemsResult:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/DeleteItemsResultLibraryItem'
        redirectUrl:
          format: uri
          type: string
    DeletedDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        label:
          $ref: '#/components/schemas/Translatable'
        value:
          $ref: '#/components/schemas/Translatable'
    Direction:
      type: object
      properties:
        x:
          format: double
          type: number
        "y":
          format: double
          type: number
        z:
          format: double
          type: number
    DismissFilter:
      type: object
      properties:
        searchDismiss:
          $ref: '#/components/schemas/SearchDismiss'
        referenceDismiss:
          $ref: '#/components/schemas/ReferenceDismiss'
        itemsDismiss:
          $ref: '#/components/schemas/ItemsDismiss'
        linkDismiss:
          $ref: '#/components/schemas/LinkDismiss'
        flatDismiss:
          $ref: '#/components/schemas/FlatDismiss'
        dopDismiss:
          $ref: '#/components/schemas/DopDismiss'
        supplierDismiss:
          $ref: '#/components/schemas/SupplierDismiss'
        hiddenDismiss:
          $ref: '#/components/schemas/HiddenDismiss'
        deletedDismiss:
          $ref: '#/components/schemas/DeletedDismiss'
        dismissAllUrl:
          format: uri
          type: string
        dismissLabels:
          type: array
          items:
            $ref: '#/components/schemas/DismissFilterItem'
        empty:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/DismissFilterItem'
    DismissFilterItem:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/Translatable'
        value:
          $ref: '#/components/schemas/Translatable'
        dismissUrl:
          format: uri
          type: string
    Document:
      type: object
      properties:
        filename:
          type: string
        type:
          type: string
        isModelAction:
          type: boolean
    Document1:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        latestRevisionStatusRef:
          $ref: '#/components/schemas/DocumentStatusRef'
        assignmentCount:
          format: int64
          type: integer
        folder:
          type: boolean
        url:
          format: uri
          type: string
        childrenUrl:
          format: uri
          type: string
        path:
          type: array
          items:
            type: string
        namingConvention:
          $ref: '#/components/schemas/NamingConventionReferenceEntity'
        owner:
          $ref: '#/components/schemas/Contact'
        unknown:
          type: boolean
        deleted:
          type: boolean
    DocumentConfiguration:
      type: object
      properties:
        uploadLimit:
          format: int64
          type: integer
        uploadLimitByFileType:
          $ref: '#/components/schemas/UploadLimitByFileType'
    DocumentDraftId:
      type: object
      properties:
        value:
          type: string
    DocumentId:
      type: object
      properties:
        value:
          type: string
    DocumentPreviewStatusResult:
      type: object
      properties:
        status:
          type: string
        previewUrl:
          type: string
        contentType:
          type: string
    DocumentReferenceEntity:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ViewpointDocumentType'
        libraryId:
          type: string
        documentId:
          type: string
        fileId:
          type: string
    DocumentRevision:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/DocumentRevisionId'
        documentId:
          $ref: '#/components/schemas/DocumentId'
        uploadedByUserId:
          type: string
        uploadedAt:
          format: int64
          type: integer
        publishedByUserId:
          type: string
        publishedAt:
          format: int64
          type: integer
        version:
          format: int32
          type: integer
        fileName:
          type: string
        downloadFileName:
          type: string
        fileSize:
          type: string
        first:
          type: boolean
        downloadUrl:
          format: uri
          type: string
        imageUrl:
          format: uri
          type: string
        previewUrl:
          type: string
        updateStatusUrl:
          format: uri
          type: string
        statusRef:
          $ref: '#/components/schemas/DocumentStatusRef'
        scannedDownload:
          $ref: '#/components/schemas/ScannedDownload'
        modelRevisionId:
          type: string
        fileIcon:
          type: string
        pdf:
          type: boolean
        type:
          type: string
    DocumentRevisionId:
      type: object
      properties:
        value:
          type: string
    DocumentStatusModel:
      type: object
      properties:
        ref:
          type: string
        name:
          type: string
        color:
          type: string
        type:
          type: string
        deleted:
          type: boolean
    DocumentStatusRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    DocumentStorageStatus:
      type: object
      properties:
        revisionsSize:
          format: int64
          type: integer
        draftsSize:
          format: int64
          type: integer
        limit:
          format: int64
          type: integer
        used:
          format: int64
          type: integer
        available:
          format: int64
          type: integer
    DocumentWithCurrentRevision:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Document1'
        currentRevision:
          $ref: '#/components/schemas/DocumentRevision'
        path:
          type: array
          items:
            $ref: '#/components/schemas/Document1'
        uploadNewRevisionUrl:
          format: uri
          type: string
    DocumentsPath:
      type: object
      properties:
        path:
          type: array
          items:
            $ref: '#/components/schemas/Document1'
        homeUrl:
          format: uri
          type: string
    DocumentsViewModel:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentWithCurrentRevision'
        pagination:
          $ref: '#/components/schemas/PaginationData'
        path:
          $ref: '#/components/schemas/DocumentsPath'
        currentUrl:
          format: uri
          type: string
        searchUrl:
          format: uri
          type: string
        currentSearch:
          type: string
        parentId:
          type: string
    DopDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        dop:
          type: boolean
    DownloadSessionEntity:
      type: object
      properties:
        supportedFileExtensions:
          type: array
          items:
            type: string
        expiresAt:
          format: int64
          type: integer
    DrawingDataResponse:
      type: object
      properties:
        status:
          type: string
        url:
          type: string
        drawingMetadata:
          $ref: '#/components/schemas/DrawingMetadata'
    DrawingMetadata:
      type: object
      properties:
        drawingA:
          $ref: '#/components/schemas/Point1'
        drawingB:
          $ref: '#/components/schemas/Point1'
        modelA:
          $ref: '#/components/schemas/Point1'
        modelB:
          $ref: '#/components/schemas/Point1'
        aspectRatio:
          format: double
          type: number
        matrix:
          $ref: '#/components/schemas/Matrix3'
        modelIds:
          type: array
          items:
            $ref: '#/components/schemas/ModelRef'
        clipping:
          type: array
          items:
            $ref: '#/components/schemas/Clipping'
        requestedBy:
          $ref: '#/components/schemas/UserRef'
        requestedAt:
          format: date
          type: string
          example: 2022-03-10
        sourceRevisionId:
          type: string
    DriveEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    DropboxSharedFolder:
      type: object
      properties:
        sharedPath:
          type: string
    DueDate:
      type: object
      properties:
        dueTime:
          format: int64
          type: integer
        ONE_DAY:
          format: int64
          type: integer
        TWO_DAYS:
          format: int64
          type: integer
        ONE_WEEK:
          format: int64
          type: integer
        isClosedStatus:
          type: boolean
        archivedMilestone:
          type: boolean
        icon:
          type: string
        dueTitle:
          type: string
        faIcon:
          type: boolean
        dueColor:
          type: string
        dueClass:
          type: string
    EWMA:
      type: object
      properties:
        initialized:
          type: boolean
        rate:
          format: double
          type: number
        uncounted:
          type: object
        alpha:
          format: double
          type: number
        interval:
          format: double
          type: number
    EditNameResult:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/Translatable'
        success:
          type: boolean
    EmailPOST:
      type: object
      properties:
        email:
          type: string
    EmailWithNameAndTeams:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/OptionalString'
        email:
          type: string
        original:
          type: string
        fullEmail:
          type: string
        teamNames:
          type: array
          items:
            type: string
        teamNamesJSON:
          type: string
    ExistingDocument:
      type: object
      properties:
        canWrite:
          type: boolean
        name:
          type: string
        lastRevisionName:
          type: string
        documentId:
          type: string
        namingConventionId:
          type: string
    ExportBCFReport:
      type: object
      properties:
        errorMessage:
          type: string
        issues:
          type: array
          items:
            $ref: '#/components/schemas/ExportIssueReport'
    ExportIssueReport:
      type: object
      properties:
        issueRef:
          type: string
        issueNumber:
          format: int32
          type: integer
        warnings:
          type: array
          items:
            type: string
    FavoriteLibrariesModel:
      type: object
      properties:
        favoriteLibraries:
          $ref: '#/components/schemas/FavoriteLibraries'
    Feature:
      enum:
      - ANNOTATION_STAGE
      - BCF_3_0_EXPORT_STAGE
      - BCF_2_1_EXPORT_STAGE
      - BCF_2_1_IMPORT_STAGE
      - CANDIDATE_LIBRARIES
      - CITYGML_STAGE
      - CREATE_APP_STAGE
      - COLLECTIONS_STAGE
      - COLLECTIONS_V2_STAGE
      - COLLECTIONS_V3
      - DOCUMENT_LIST_V2
      - DOCUMENT_APPROVALS_DUE_FILTER
      - DOCUMENT_APPROVALS_STAGE
      - DOCUMENT_VIEWER_3D_STAGE
      - DOCUMENT_VIEWER_2D_STAGE
      - DOCUMENT_WORKFLOW_STAGE
      - DOCUMENT_FOLDER_INFO
      - DOCUMENT_UPLOAD_AUTO_SUGGEST_DOCUMENT
      - DOCUMENT_UPLOAD_AUTO_RENAME_DOCUMENT
      - DOCUMENT_CUSTOM_FIELDS
      - LIBRARY_ITEM_ADD_RELATED_TOPIC
      - DRAFT_ACL_STAGE
      - DRAG_AND_DROP_DOCUMENTS_STAGE
      - DRAWINGS_IN_2D
      - EXPORT_ISSUES_TO_PDF
      - EXPORT_ISSUE_MENU_REDESIGN
      - GEOMETRIC_QUERIES_STAGE
      - STORE_GEOMETRIC_QUERIES_STAGE
      - FOLDER_COUNT_STAGE
      - INFECTED_DOCUMENT
      - INSPECT_ALIGNMENTS
      - ISSUE_DELETE_COMMENT_AND_VIEWPOINT_STAGE
      - ISSUE_MARKERS_STAGE
      - ISSUE_HISTORY_SHOW_FULL_DESCRIPTION
      - ISSUE_CLONE
      - ISSUES_ACL_EXTENSION_CLOSE_ISSUE
      - ISSUES_MULTI_COMMENT
      - ISSUE_VIEWPOINT_REPLAY_ORIGINAL_REVISIONS
      - LABEL_VIEW_REACT
      - LIBRARY_COMPLETE_STAGE
      - DATE_FILTERS
      - SHAREPOINT_SETTINGS_STAGE
      - DROPBOX_SETTINGS_STAGE
      - MARKDOWN_CODE_TOOL
      - MERGE_LABELS
      - MEMORIZE_TABLE_SELECTION
      - MODEL_ACL_STAGE
      - MODELS_AS_DOCUMENTS_VIEW
      - MODELS_AS_DOCUMENTS_DEFAULT_FOLDER
      - MODEL_STATS_STAGE
      - NAMING_CONVENTIONS_CONFIGURATION
      - NAMING_CONVENTIONS_ASSIGNMENT
      - NAMING_CONVENTIONS_USAGE
      - ORGANIZATION_LIST
      - ORGANIZATION_PROFILE_STAGE
      - ORGANIZATION_PROJECT_MEMBERS_STAGE
      - ORGANIZATION_PROJECTS_STAGE
      - ORGANIZATION_MEMBERS_INVITE_STAGE
      - PDFTRON_SETTINGS
      - PDF_COMPARE
      - PDF_COMPARE_ISSUES
      - PROJECT_TEMPLATE_EXTENSIONS
      - SELECTED_REVISION_STAGE
      - SHARE_LINK_STAGE
      - SHARE_LINK_SCREENSHOT
      - SORT_STAGE
      - TEAMS_NOTIFICATIONS
      - SELECTION_TAB
      - SPATIAL_STRUCTURE_STAGE
      - CONNECTION_STATE_ALERT
      - VIEWER3D_EXTENDED_VIEW_RANGE
      - VIEWER_GRID_DROPDOWN_STAGE
      - VIEWER_CLIPPING_PLANE_TOOLBAR_STAGE
      - VIEWER_MEASURE_TOOLBAR_STAGE
      - VIEWER_CREATE_CLIPPING_PLANE_TOOL_STAGE
      - VIEWER_CREATE_MEASURE_PLANE_TOOL_STAGE
      - VIEWPOINT_MODEL_LISTING_V2
      - WEB_VIEWER_SERVER
      - WEB_VIEWER_SERVER_PDF_AND_OFFICE
      - WEB_VIEWER_VIDEOS
      - NEW_VIEW_LAYOUT
      - GEOMETRY_STREAMING
      - PRODUCTS_ACCESS
      - FILTER_SEARCH
      - FILTER_GROUPED_LABELS
      - VISIBLE_SELECTED_COLLAPSED_FILTER_ITEMS
      type: string
    FeatureStage:
      enum:
      - disabled
      - internal
      - alpha
      - beta
      - new
      - public
      type: string
    FileReviewStateOptionsEntity:
      type: object
      properties:
        issueTemplateId:
          type: string
        documentStatusId:
          type: string
    FileType:
      required:
      - extension
      - size
      type: object
      properties:
        extension:
          type: string
        size:
          format: int64
          type: integer
    Filter:
      type: object
      properties:
        dismissFilter:
          $ref: '#/components/schemas/DismissFilter'
        filterLinks:
          $ref: '#/components/schemas/FilterLinks'
        filterParameters:
          type: object
          additionalProperties:
            type: string
        totalCount:
          format: int64
          type: integer
        children:
          $ref: '#/components/schemas/ChildrenRequest'
        deleted:
          type: boolean
    Filter1:
      enum:
      - ALL
      - DELETED
      - NOT_DELETED
      type: string
    FilterCounts:
      type: object
      properties:
        counts:
          type: object
          additionalProperties:
            format: int64
            type: integer
        filterItemsHashKey:
          format: int32
          type: integer
    FilterGroup:
      type: object
      properties:
        id:
          type: string
        label:
          $ref: '#/components/schemas/FilterLabel'
        items:
          type: array
          items:
            $ref: '#/components/schemas/FilterGroupItemBase'
        defaultItemId:
          type: string
        exclusive:
          type: boolean
        feature:
          $ref: '#/components/schemas/Feature'
        dismissFilterOnly:
          type: boolean
    FilterGroup1:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/Translatable'
        items:
          type: array
          items:
            $ref: '#/components/schemas/FilterItem'
    FilterGroupItemBase:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/FilterItemType'
        label:
          $ref: '#/components/schemas/FilterLabel'
        selected:
          type: boolean
        count:
          format: int64
          type: integer
        exclusive:
          type: boolean
    FilterItem:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/Translatable'
        active:
          type: boolean
        url:
          format: uri
          type: string
        dismissUrl:
          format: uri
          type: string
        count:
          format: int64
          type: integer
        empty:
          type: boolean
    FilterItemType:
      enum:
      - CREATE_QUERY_ITEM
      - QUERY_ITEM
      - SEARCH
      - SAVED_FILTER
      - FILTER_GROUP_ITEM
      type: string
    FilterLabel:
      type: object
      properties:
        translatable:
          $ref: '#/components/schemas/Translatable'
        intent:
          $ref: '#/components/schemas/Intent'
        icon:
          $ref: '#/components/schemas/Icon'
        title:
          $ref: '#/components/schemas/Translatable'
    FilterLinks:
      type: object
      properties:
        searchFilter:
          $ref: '#/components/schemas/SearchFilter1'
        filterGroups:
          type: array
          items:
            $ref: '#/components/schemas/FilterGroup1'
    FilterType:
      enum:
      - BOOKMARKS
      - ISSUES
      - LABELS
      - LIBRARY_ITEM_FILES
      - LIBRARY_ITEM_APPROVALS
      - LIBRARY_ITEM_COLLECTIONS
      - LIBRARY_ITEMS
      - LIBRARY_ITEMS_V2
      - MODELS
      - NOTIFICATIONS
      - ORGANIZATIONS
      - ORGANIZATION_MEMBERS
      - ORGANIZATION_PROJECT_MEMBERS
      - ORGANIZATION_PROJECTS
      - PROJECTS
      - PROJECT_NOTIFICATIONS
      - PRODUCTS
      - SUGGEST_ORGANIZATION_MEMBERS
      type: string
    Filters:
      type: object
      properties:
        filterType:
          $ref: '#/components/schemas/FilterType'
        subTypeId:
          type: string
        countParams:
          type: object
          additionalProperties:
            type: string
        searchFilters:
          $ref: '#/components/schemas/SearchFilters'
        savedFilters:
          $ref: '#/components/schemas/SavedFilters'
        queryFilters:
          $ref: '#/components/schemas/QueryFilters'
        filterGroups:
          type: array
          items:
            $ref: '#/components/schemas/FilterGroup'
        paramsToKeep:
          uniqueItems: true
          type: array
          items:
            type: string
        filterItemsHashKey:
          format: int32
          type: integer
    FlatDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        label:
          $ref: '#/components/schemas/Translatable'
        value:
          $ref: '#/components/schemas/Translatable'
    FullAcl:
      type: object
      properties:
        aclId:
          type: string
        othersAcl:
          $ref: '#/components/schemas/Acl'
        ownersAcl:
          $ref: '#/components/schemas/Acl'
        aclUsers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        aclTeams:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        noAclTeams:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        noAclUsers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        teamMembersMap:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/UserRef'
        currentUserAcl:
          $ref: '#/components/schemas/Acl'
        redirectUrl:
          format: uri
          type: string
        refreshPage:
          type: boolean
        disabledUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserRef'
        customRules:
          type: array
          items:
            $ref: '#/components/schemas/CustomAclRule'
        customConditions:
          type: array
          items:
            $ref: '#/components/schemas/CustomAclCondition'
        customOwnerLabel:
          $ref: '#/components/schemas/Translatable'
    FullAclDocuments:
      type: object
      properties:
        aclId:
          type: string
        othersAcl:
          $ref: '#/components/schemas/Acl'
        ownersAcl:
          $ref: '#/components/schemas/Acl'
        aclUsers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        aclTeams:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        noAclTeams:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        noAclUsers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/UserWithAcl'
        teamMembersMap:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/UserRef'
        currentUserAcl:
          $ref: '#/components/schemas/Acl'
        redirectUrl:
          format: uri
          type: string
        refreshPage:
          type: boolean
        disabledUsers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserRef'
        customRules:
          type: array
          items:
            $ref: '#/components/schemas/CustomAclRule'
        customConditions:
          type: array
          items:
            $ref: '#/components/schemas/CustomAclCondition'
        customOwnerLabel:
          $ref: '#/components/schemas/Translatable'
        hasEditAclRightsForFilesInFolder:
          type: boolean
        hasEditAclRightsForAllSubFilesAndFolders:
          type: boolean
        isFolder:
          type: boolean
        documenstAcl:
          type: boolean
        folder:
          type: boolean
        depth:
          type: string
    GetNotificationSettingListResponse:
      type: object
      properties:
        settings:
          type: array
          items:
            $ref: '#/components/schemas/GetNotificationSettingResponse'
    GetNotificationSettingResponse:
      type: object
      properties:
        pluginType:
          $ref: '#/components/schemas/NotificationPluginType'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        userRef:
          $ref: '#/components/schemas/UserRef'
        enabled:
          type: boolean
        configuration:
          type: object
          additionalProperties:
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/NotificationEventNode'
    GitHubPullRequest:
      type: object
      properties:
        gitHubUrl:
          type: string
        removeGitHubUrl:
          format: uri
          type: string
        pullNumber:
          type: string
    GrantedIssueBoardAccess:
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/AclScope'
        canCloseAllIssues:
          type: boolean
        canCloseOwnIssues:
          type: boolean
    GrantedIssueBoardAccessReact:
      type: object
      properties:
        read:
          type: boolean
        write:
          type: boolean
        editAcl:
          type: boolean
        canCloseAllIssues:
          type: boolean
        canCloseOwnIssues:
          type: boolean
    HiddenDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        label:
          $ref: '#/components/schemas/Translatable'
        value:
          $ref: '#/components/schemas/Translatable'
    Histogram:
      type: object
      properties:
        sample:
          $ref: '#/components/schemas/Sample'
        min:
          type: object
        max:
          type: object
        sum:
          type: object
        variance:
          type: object
        count:
          type: object
        snapshot:
          $ref: '#/components/schemas/Snapshot'
    Html:
      type: object
      properties:
        tagStack:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        writer:
          type: object
        attributes:
          type: object
          additionalProperties:
            type: string
        bindings:
          type: object
          additionalProperties: {}
        previousBuilder:
          $ref: '#/components/schemas/MarkupBuilderObject'
        depth:
          format: int32
          type: integer
        namespacePrefix:
          type: string
        previousIndenter:
          $ref: '#/components/schemas/Indenter'
        indenter:
          $ref: '#/components/schemas/Indenter'
        self:
          $ref: '#/components/schemas/Html'
    HtmlTemplate:
      type: object
      properties:
        src:
          type: string
        id:
          type: string
    Icon:
      type: object
      properties:
        iconType:
          $ref: '#/components/schemas/IconType'
        color:
          type: string
        strokeColor:
          type: string
    IconData:
      type: object
      properties:
        icon:
          type: string
        data:
          type: string
    IconType:
      enum:
      - ADD_CIRCLE
      - ADD_SMALL
      - ADD_SQUARE
      - ARROW_DOWN
      - ARROW_RIGHT
      - ARROW_LEFT
      - AXIS
      - BIN
      - BOOKMARKS
      - CALENDAR
      - CHECK
      - CHECK_ROUNDED
      - CIRCLE
      - CLEAR
      - CONTENT
      - DASHBOARD
      - DOCUMENTS
      - DROPBOX
      - FILE_ADD
      - FORBIDDEN
      - GLOBE
      - HASH_MARK
      - HELP
      - HOME
      - INFO
      - INFO_SQUARE
      - INSPECT
      - ISSUES
      - LABEL
      - LABELS
      - LIBRARIES
      - MAGNIFIER
      - MAGNIFIER_SMALL
      - MEMBERS
      - MENU_DOTS
      - MENU_DOTS_HORIZONTAL
      - MILESTONES
      - MODELS
      - NEWS
      - NO_IMAGE
      - NOTIFICATIONS
      - OPEN_LINK_IN_NEW_TAB
      - PROJECTS
      - REFRESH
      - REVISION_ARROW
      - SEARCH
      - SETTINGS
      - SHAREPOINT
      - STAR
      - TEXT
      - TIME
      - TIP
      - TREES
      - USER_ADD
      - USER_ARROW_IN
      - USER_ARROW_OUT
      - USER_MAGNIFIER
      - VIEWER3D
      - WARNING
      - X
      - ZOOM
      - NONE
      type: string
    IdentityProviderParam:
      type: object
      properties:
        email:
          type: string
    IdentityProviderResponse:
      type: object
      properties:
        isBimsync:
          type: boolean
        bimsync:
          type: boolean
    Import:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ImportId'
        comment:
          type: string
        filename:
          type: string
        time:
          format: int64
          type: integer
        createdMember:
          $ref: '#/components/schemas/Contact'
        failed:
          $ref: '#/components/schemas/OptionalString'
        failDetails:
          $ref: '#/components/schemas/OptionalString'
        dismissImportUrl:
          format: uri
          type: string
    ImportId:
      type: object
      properties:
        value:
          type: string
    ImportIssueError:
      enum:
      - NEW_FAILED
      - UPDATE_FAILED
      - MISSING_TITLE
      - MISSING_MARKUP
      - INVALID_TOPIC_GUID
      - FUTURE_DATE
      - UPDATE_CANNOT_CLOSE
      - NEW_CANNOT_CLOSE
      type: string
    ImportIssueReport:
      type: object
      properties:
        issueRef:
          type: string
        title:
          type: string
        error:
          $ref: '#/components/schemas/ImportIssueError'
        success:
          $ref: '#/components/schemas/ImportIssueSuccess'
    ImportIssueSuccess:
      type: object
      properties:
        issueNumber:
          format: int32
          type: integer
        changeType:
          $ref: '#/components/schemas/ChangeType'
        linkStatus:
          $ref: '#/components/schemas/LinkStatus'
        topicDateStatus:
          $ref: '#/components/schemas/TopicDateStatus'
        skippedViewpoints:
          type: array
          items:
            $ref: '#/components/schemas/SkippedViewpoint'
        skippedDocuments:
          type: array
          items:
            $ref: '#/components/schemas/SkippedDocumentReference'
        relatedIssues:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/IssueRef'
    ImportResult:
      type: object
      properties:
        failure:
          type: boolean
        message:
          $ref: '#/components/schemas/Translatable'
    Indenter:
      type: object
    IndexModeEntity:
      enum:
      - FULL
      - BASIC
      type: string
    InspectIdentification:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/InspectIdentificationItem'
        type:
          $ref: '#/components/schemas/InspectIdentificationItem'
        revisionId:
          $ref: '#/components/schemas/RevisionId1'
        error:
          type: boolean
        empty:
          type: boolean
    InspectIdentificationItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tag:
          type: string
        guid:
          type: string
        type:
          $ref: '#/components/schemas/InspectRelation'
        ifcEnum:
          type: string
        empty:
          type: boolean
    InspectIssues:
      type: object
      properties:
        error:
          type: boolean
        stats:
          $ref: '#/components/schemas/IssueBoardStats'
        issuesUrl:
          format: uri
          type: string
        newIssueUrl:
          format: uri
          type: string
    InspectLibraries:
      type: object
      properties:
        libraries:
          type: array
          items:
            $ref: '#/components/schemas/InspectLibrary'
    InspectLibrary:
      type: object
      properties:
        library:
          $ref: '#/components/schemas/Library1'
        url:
          format: uri
          type: string
        libraryItemsUrl:
          format: uri
          type: string
        associationSize:
          format: int64
          type: integer
        associatedLibraryItemRefs:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItemRef'
    InspectOwnerHistory:
      type: object
      properties:
        owningUser:
          $ref: '#/components/schemas/InspectUser'
        ownerByUsing:
          type: string
        addedBy:
          type: string
        addedByUsing:
          type: string
        domain:
          type: string
        created:
          format: int64
          type: integer
        error:
          type: boolean
        empty:
          type: boolean
    InspectProducts:
      type: object
      properties:
        identification:
          $ref: '#/components/schemas/InspectIdentification'
        relation:
          $ref: '#/components/schemas/InspectRelations'
        properties:
          $ref: '#/components/schemas/InspectProperties'
        ownerHistory:
          $ref: '#/components/schemas/InspectOwnerHistory'
        model:
          $ref: '#/components/schemas/Model'
        selectedRevision:
          $ref: '#/components/schemas/Revision'
        error:
          type: boolean
    InspectProperties:
      type: object
      properties:
        propertySets:
          type: array
          items:
            $ref: '#/components/schemas/InspectPropertySet'
        quantitySets:
          type: array
          items:
            $ref: '#/components/schemas/InspectPropertySet'
        materials:
          type: array
          items:
            $ref: '#/components/schemas/InspectPropertySet'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/InspectProperty'
        error:
          type: boolean
        empty:
          type: boolean
    InspectProperty:
      type: object
      properties:
        name:
          type: string
        ifcType:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/InspectPropertyValue'
        path:
          type: string
        overridden:
          type: boolean
        valueType:
          $ref: '#/components/schemas/ValueType'
        undefined:
          type: boolean
        boolean:
          type: boolean
        default:
          type: boolean
        number:
          type: boolean
    InspectPropertySet:
      type: object
      properties:
        name:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/InspectProperty'
        undefined:
          type: boolean
    InspectPropertyValue:
      type: object
      properties:
        unit:
          type: string
        value: {}
        type:
          type: string
        ifcType:
          type: string
        boolean:
          type: boolean
        default:
          type: boolean
        number:
          type: boolean
        url:
          type: boolean
        undefined:
          type: boolean
    InspectRelation:
      type: object
      properties:
        name:
          type: string
        objectId:
          format: int64
          type: integer
    InspectRelations:
      type: object
      properties:
        system:
          $ref: '#/components/schemas/InspectRelation'
        containment:
          $ref: '#/components/schemas/InspectRelation'
        layer:
          $ref: '#/components/schemas/InspectRelation'
        children:
          type: array
          items:
            $ref: '#/components/schemas/InspectRelation'
        error:
          type: boolean
        empty:
          type: boolean
    InspectUser:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
    Intent:
      enum:
      - PRIMARY
      - SUCCESS
      - WARNING
      - DANGER
      - NONE
      type: string
    InviteToken:
      type: object
      properties:
        value:
          type: string
    IssueAnnotations:
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/CommentAnnotation'
        files:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItemAndFile'
    IssueBoard:
      type: object
      properties:
        collectionRef:
          $ref: '#/components/schemas/IssueBoardCollectionRef'
        ref:
          $ref: '#/components/schemas/IssueBoardRef'
        name:
          type: string
        description:
          type: string
        boardType:
          $ref: '#/components/schemas/IssueBoardType'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/IssueStatus1'
        types:
          type: array
          items:
            $ref: '#/components/schemas/IssueType1'
        priorities:
          type: array
          items:
            $ref: '#/components/schemas/IssuePriority1'
        importStarted:
          format: date
          type: string
          example: 2022-03-10
        archived:
          type: boolean
        acl:
          $ref: '#/components/schemas/AclId'
        aclSettings:
          $ref: '#/components/schemas/IssueBoardAclSettings'
        isMail:
          type: boolean
        owner:
          $ref: '#/components/schemas/UserRef'
        createdBy:
          $ref: '#/components/schemas/UserRef'
        createdAt:
          format: int64
          type: integer
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldInstance'
        mail:
          type: boolean
    IssueBoard1:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/IssueBoardRef'
        name:
          type: string
        description:
          type: string
        boardType:
          $ref: '#/components/schemas/IssueBoardType'
        readOnly:
          type: boolean
        url:
          format: uri
          type: string
        issuesFilterUrl:
          format: uri
          type: string
        statisticsUrl:
          format: uri
          type: string
        archived:
          type: boolean
        mail:
          type: boolean
        owner:
          $ref: '#/components/schemas/UserRef'
        createdBy:
          $ref: '#/components/schemas/UserRef'
        createdAt:
          format: int64
          type: integer
        hasEditBoardRights:
          type: boolean
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/IssueStatus'
        types:
          type: array
          items:
            $ref: '#/components/schemas/IssueType'
        priorities:
          type: array
          items:
            $ref: '#/components/schemas/IssuePriority'
        id:
          type: string
        shortRef:
          type: string
        undeletedStatuses:
          type: array
          items:
            $ref: '#/components/schemas/IssueStatus'
        undeletedTypes:
          type: array
          items:
            $ref: '#/components/schemas/IssueType'
        bcf1:
          type: boolean
        editable:
          type: boolean
    IssueBoardAclSettings:
      type: object
      properties:
        closeAclEnabled:
          type: boolean
    IssueBoardCollectionRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    IssueBoardDetails:
      type: object
      properties:
        issueBoard:
          $ref: '#/components/schemas/IssueBoardReact'
        bcf1Compatible:
          type: boolean
        bcfApiUrl:
          type: string
        bcfUploadLimit:
          format: int64
          type: integer
    IssueBoardReact:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        readOnly:
          type: boolean
        archived:
          type: boolean
        ownerId:
          type: string
        createdById:
          type: string
        createdAt:
          format: int64
          type: integer
        userAcl:
          type: object
          allOf:
          - $ref: '#/components/schemas/Acl'
          deprecated: true
        grantedAccess:
          $ref: '#/components/schemas/GrantedIssueBoardAccessReact'
        boardType:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/IssueStatus'
        types:
          type: array
          items:
            $ref: '#/components/schemas/IssueType'
        priorities:
          type: array
          items:
            $ref: '#/components/schemas/IssuePriority'
    IssueBoardRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    IssueBoardRequest:
      type: object
      properties:
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole'
        userRef:
          $ref: '#/components/schemas/UserRef'
        userId:
          $ref: '#/components/schemas/UserId'
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
        core:
          $ref: '#/components/schemas/CoreIssueBoardRequest'
        simple:
          $ref: '#/components/schemas/Simple2'
        issueBoardRef:
          $ref: '#/components/schemas/IssueBoardRef'
        grantedIssueBoardScope:
          $ref: '#/components/schemas/AclScope'
        issueBoardArchived:
          type: boolean
    IssueBoardStats:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/IssueBoardRef'
        name:
          type: string
        description:
          type: string
        candidateUrl:
          format: uri
          type: string
        openUrl:
          format: uri
          type: string
        closedUrl:
          format: uri
          type: string
        hideCandidateField:
          type: boolean
        candidateIssues:
          $ref: '#/components/schemas/NumericValue'
        openIssues:
          $ref: '#/components/schemas/NumericValue'
        closedIssues:
          $ref: '#/components/schemas/NumericValue'
        myStats:
          $ref: '#/components/schemas/MemberIssueStats'
        memberStats:
          type: array
          items:
            $ref: '#/components/schemas/MemberIssueStats'
        unassignedStats:
          $ref: '#/components/schemas/MemberIssueStats'
        disableLinks:
          type: boolean
        chartUrl:
          format: uri
          type: string
        hiddenMemberStatsCount:
          $ref: '#/components/schemas/NumericValue'
        archivedBoard:
          type: boolean
    IssueBoardType:
      enum:
      - BCF_1
      - BCF_2
      type: string
    IssueBoardUsersResult:
      type: object
      properties:
        usersAndTeams:
          type: array
          items:
            $ref: '#/components/schemas/User'
        teamRelations:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          deprecated: true
        userTeamsRelation:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        teamUsersRelation:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        userRefs:
          uniqueItems: true
          type: array
          items:
            type: string
        teamRefs:
          uniqueItems: true
          type: array
          items:
            type: string
    IssueBoardWithStats:
      type: object
      properties:
        stats:
          $ref: '#/components/schemas/IssueStatsReact'
        issueBoard:
          $ref: '#/components/schemas/IssueBoardReact'
    IssueComment:
      type: object
      properties:
        issueNumber:
          format: int32
          type: integer
        id:
          type: string
        issueId:
          type: string
        viewDataId:
          type: string
        comment:
          type: string
        commentHtml:
          type: string
        createdBy:
          $ref: '#/components/schemas/IssueContactEntity'
        createdAt:
          $ref: '#/components/schemas/IssueDateEntity'
        updated:
          format: int64
          type: integer
    IssueCommentRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    IssueCommentsEventsAndAnnotations:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/IssueComment'
        events:
          type: array
          items:
            $ref: '#/components/schemas/IssueHistoryEvent'
        annotations:
          $ref: '#/components/schemas/IssueAnnotations'
    IssueContactEntity:
      type: object
      properties:
        userId:
          type: string
        importedById:
          type: string
        emailOrName:
          type: string
    IssueCustomFieldReact:
      type: object
      properties:
        customFieldId:
          type: string
        value: {}
        isNumeric:
          type: boolean
        numeric:
          type: boolean
    IssueDateEntity:
      type: object
      properties:
        date:
          format: int64
          type: integer
        importedAt:
          format: int64
          type: integer
    IssueEvent:
      type: object
      properties:
        type:
          type: object
          additionalProperties:
            type: boolean
        value:
          type: string
        date:
          format: date
          type: string
          example: 2022-03-10
        modifier:
          $ref: '#/components/schemas/Contact'
        formattedComment:
          type: string
        viewDataRef:
          $ref: '#/components/schemas/ViewDataRef'
        initial:
          type: boolean
    IssueExportModel:
      type: object
      properties:
        id:
          type: string
        issueBoard:
          $ref: '#/components/schemas/IssueBoard1'
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          format: int64
          type: integer
        startedAt:
          format: int64
          type: integer
        completedAt:
          format: int64
          type: integer
        status:
          type: string
        statusLabel:
          type: string
        format:
          type: string
        humanReadableFormat:
          type: string
        commentOption:
          type: string
        report:
          $ref: '#/components/schemas/ExportBCFReport'
        fileSize:
          format: int64
          type: integer
        downloadUrl:
          format: uri
          type: string
        refreshUrl:
          format: uri
          type: string
        detailsUrl:
          format: uri
          type: string
    IssueHistoryEvent:
      type: object
      properties:
        key:
          type: string
        type:
          type: string
        value:
          type: string
        name:
          type: string
        attributes:
          type: object
          additionalProperties: {}
        createdBy:
          $ref: '#/components/schemas/IssueContactEntity'
        createdAt:
          $ref: '#/components/schemas/IssueDateEntity'
    IssueImportModel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        issueBoard:
          $ref: '#/components/schemas/IssueBoard1'
        user:
          $ref: '#/components/schemas/User'
        uploadedAt:
          format: int64
          type: integer
        startedAt:
          format: int64
          type: integer
        completedAt:
          format: int64
          type: integer
        status:
          type: string
        statusLabel:
          type: string
        report:
          $ref: '#/components/schemas/IssuesImportReport'
        refreshUrl:
          format: uri
          type: string
        detailsUrl:
          format: uri
          type: string
    IssueLibraryItems:
      type: object
      properties:
        libraries:
          type: array
          items:
            $ref: '#/components/schemas/LibraryWithLibraryItems'
        userHasWriteAccess:
          type: boolean
    IssueList:
      type: object
      properties:
        issues:
          type: array
          items:
            $ref: '#/components/schemas/IssueReact'
        totalSize:
          format: int64
          type: integer
    IssueMoveResult:
      type: object
      properties:
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        issueRef:
          $ref: '#/components/schemas/IssueRef'
        issueNumber:
          format: int32
          type: integer
        title:
          type: string
        errorMessage:
          type: string
        duplicateIssueNumber:
          format: int32
          type: integer
        url:
          format: uri
          type: string
    IssuePointColors:
      type: object
      properties:
        dueDateColor:
          type: string
        statusColor:
          type: string
        typeColor:
          type: string
    IssuePointModel:
      type: object
      properties:
        ref:
          type: string
        modelRef:
          $ref: '#/components/schemas/ModelRef'
        revisionRef:
          type: string
        pointId:
          type: string
    IssuePointWithColorAndAccess:
      type: object
      properties:
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        issueBoardRef:
          $ref: '#/components/schemas/IssueBoardRef'
        issueNumber:
          format: int32
          type: integer
        viewDataRef:
          $ref: '#/components/schemas/ViewDataRef'
        id:
          type: string
        x:
          format: double
          type: number
        "y":
          format: double
          type: number
        z:
          format: double
          type: number
        createdBy:
          $ref: '#/components/schemas/UserRef'
        createdAt:
          format: date
          type: string
          example: 2022-03-10
        models:
          type: array
          items:
            $ref: '#/components/schemas/IssuePointModel'
        colors:
          $ref: '#/components/schemas/IssuePointColors'
        spatialStructureBuildingRef:
          $ref: '#/components/schemas/SpatialStructureElementRef'
        isReadOnly:
          type: boolean
    IssuePriority:
      type: object
      properties:
        labelType:
          type: string
        ref:
          type: string
        labelGroupName:
          type: string
        name:
          type: string
        color:
          type: string
        doTranslate:
          type: boolean
        pjax:
          type: boolean
        fontColor:
          type: string
        borderColor:
          type: string
        showBorder:
          type: boolean
        deleted:
          type: boolean
        value:
          format: int32
          type: integer
    IssuePriority1:
      type: object
      properties:
        ref:
          type: string
        name:
          type: string
        color:
          type: string
        deleted:
          type: boolean
        value:
          format: int32
          type: integer
    IssueReact:
      type: object
      properties:
        projectId:
          type: string
        issueNumber:
          format: int32
          type: integer
        ref:
          $ref: '#/components/schemas/IssueRef'
        issueBoardRef:
          $ref: '#/components/schemas/IssueBoardRef'
        title:
          type: string
        description:
          type: string
        descriptionHtml:
          type: string
        url:
          format: uri
          type: string
        imageUrls:
          type: array
          items:
            format: uri
            type: string
        updateTime:
          format: int64
          type: integer
        createdTime:
          format: int64
          type: integer
        dueDate:
          $ref: '#/components/schemas/DueDate'
        milestone:
          type: object
          allOf:
          - $ref: '#/components/schemas/Milestone'
          deprecated: true
        milestoneId:
          type: string
        requester:
          $ref: '#/components/schemas/Member'
        requesterTeam:
          $ref: '#/components/schemas/Member'
        assignedTo:
          $ref: '#/components/schemas/Member'
        assignedToTeam:
          $ref: '#/components/schemas/Member'
        currentAssignedTo:
          $ref: '#/components/schemas/CurrentIssueAssignee'
        currentRequester:
          $ref: '#/components/schemas/CurrentIssueAssignee'
        commentCount:
          $ref: '#/components/schemas/NumericValue'
        createdBy:
          $ref: '#/components/schemas/IssueContactEntity'
        statusIdAndUnlinked:
          $ref: '#/components/schemas/IssueStatusReact'
        typeIdAndUnlinked:
          $ref: '#/components/schemas/IssueTypeReact'
        status:
          type: object
          allOf:
          - $ref: '#/components/schemas/IssueStatus'
          deprecated: true
        type:
          type: object
          allOf:
          - $ref: '#/components/schemas/IssueType'
          deprecated: true
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
          deprecated: true
        labelIds:
          type: array
          items:
            type: string
        models:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ModelRef'
        boardInfo:
          $ref: '#/components/schemas/BoardInfo'
        documentsCount:
          $ref: '#/components/schemas/NumericValue'
        isFollowing:
          type: boolean
        isGitHubEnabled:
          type: boolean
        gitHubPullUrls:
          type: array
          items:
            $ref: '#/components/schemas/GitHubPullRequest'
        subTasksInfo:
          $ref: '#/components/schemas/IssueSubTasksInfo'
        hasPoint:
          type: boolean
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/IssueCustomFieldReact'
        gitHubEnabled:
          type: boolean
        following:
          type: boolean
    IssueRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    IssueResultError:
      type: object
      properties:
        issueRef:
          type: string
        title:
          type: string
        error:
          $ref: '#/components/schemas/ImportIssueError'
    IssueStatsReact:
      type: object
      properties:
        candidateUrl:
          format: uri
          type: string
        openUrl:
          format: uri
          type: string
        closedUrl:
          format: uri
          type: string
        candidateIssues:
          format: int64
          type: integer
        openIssues:
          format: int64
          type: integer
        closedIssues:
          format: int64
          type: integer
        myStats:
          $ref: '#/components/schemas/MemberIssueStatsReact'
        unassignedStats:
          $ref: '#/components/schemas/MemberIssueStatsReact'
        membersStats:
          type: array
          items:
            $ref: '#/components/schemas/MemberIssueStatsReact'
        chartUrl:
          format: uri
          type: string
    IssueStatus:
      type: object
      properties:
        labelType:
          type: string
        ref:
          type: string
        labelGroupName:
          type: string
        name:
          type: string
        color:
          type: string
        doTranslate:
          type: boolean
        pjax:
          type: boolean
        fontColor:
          type: string
        borderColor:
          type: string
        showBorder:
          type: boolean
        deleted:
          type: boolean
        open:
          type: boolean
        closed:
          type: boolean
        candidate:
          type: boolean
        metaStatus:
          type: string
        type:
          type: string
    IssueStatus1:
      type: object
      properties:
        ref:
          type: string
        name:
          type: string
        color:
          type: string
        deleted:
          type: boolean
        open:
          type: boolean
        type:
          $ref: '#/components/schemas/IssueStatusType'
    IssueStatusReact:
      type: object
      properties:
        id:
          type: string
        unlinkedValue:
          type: string
    IssueStatusType:
      enum:
      - OPEN
      - CLOSED
      - CANDIDATE
      type: string
    IssueSubTasksInfo:
      type: object
      properties:
        total:
          format: int32
          type: integer
        completed:
          format: int32
          type: integer
        plural:
          type: boolean
        complete:
          type: boolean
    IssueTemplateAssigneeEntity:
      type: object
      properties:
        user:
          type: string
        team:
          type: string
    IssueTemplateEntity:
      type: object
      properties:
        issueBoardId:
          type: string
        templateType:
          type: string
        templateName:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        type:
          type: string
        assignedTo:
          $ref: '#/components/schemas/IssueTemplateAssigneeEntity'
        requestedBy:
          $ref: '#/components/schemas/IssueTemplateAssigneeEntity'
        labels:
          type: array
          items:
            type: string
        dueDate:
          type: string
        milestone:
          type: string
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/IssueTemplateMetadataEntity'
        descriptionHtml:
          type: string
    IssueTemplateMetadataEntity:
      type: object
      properties:
        createdByUserId:
          type: string
        createdAt:
          format: int64
          type: integer
        updatedByUserId:
          type: string
        updatedAt:
          format: int64
          type: integer
        archived:
          type: boolean
    IssueTemplateRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    IssueTitle:
      type: object
      properties:
        issueNumber:
          format: int32
          type: integer
        title:
          type: string
    IssueType:
      type: object
      properties:
        labelType:
          type: string
        ref:
          type: string
        labelGroupName:
          type: string
        name:
          type: string
        color:
          type: string
        doTranslate:
          type: boolean
        pjax:
          type: boolean
        fontColor:
          type: string
        borderColor:
          type: string
        showBorder:
          type: boolean
        deleted:
          type: boolean
    IssueType1:
      type: object
      properties:
        ref:
          type: string
        name:
          type: string
        color:
          type: string
        deleted:
          type: boolean
    IssueTypeReact:
      type: object
      properties:
        id:
          type: string
        unlinkedValue:
          type: string
    IssueViewDatasReact:
      type: object
      properties:
        isReadOnly:
          type: boolean
        viewDatas:
          type: array
          items:
            $ref: '#/components/schemas/ViewDataReact'
        readOnly:
          type: boolean
    IssuesExportsModel:
      type: object
      properties:
        exports:
          type: array
          items:
            $ref: '#/components/schemas/IssueExportModel'
        pagination:
          $ref: '#/components/schemas/PaginationData'
    IssuesImportReport:
      type: object
      properties:
        newIssues:
          format: int32
          type: integer
        mergedIssues:
          format: int32
          type: integer
        unchangedIssues:
          format: int32
          type: integer
        issuesUrl:
          format: uri
          type: string
          deprecated: true
        failedIssues:
          type: array
          items:
            $ref: '#/components/schemas/IssueResultError'
        issues:
          type: array
          items:
            $ref: '#/components/schemas/ImportIssueReport'
        result:
          $ref: '#/components/schemas/ImportResult'
        version:
          type: string
    IssuesImportsModel:
      type: object
      properties:
        imports:
          type: array
          items:
            $ref: '#/components/schemas/IssueImportModel'
        pagination:
          $ref: '#/components/schemas/PaginationData'
    IssuesMoveDetailsEntity:
      type: object
      properties:
        moveInfo:
          $ref: '#/components/schemas/IssuesMoveInfoEntity'
        showUnlinkedWarning:
          type: boolean
    IssuesMoveInfoEntity:
      type: object
      properties:
        moveId:
          type: string
        fromIssueBoardId:
          type: string
        toIssueBoardId:
          type: string
        createdByUserId:
          type: string
        createdAt:
          format: int64
          type: integer
        startedAt:
          format: int64
          type: integer
        completedAt:
          format: int64
          type: integer
        status:
          type: string
        numberOfIssuesToMove:
          format: int32
          type: integer
        result:
          $ref: '#/components/schemas/MoveResult'
        refreshUrl:
          format: uri
          type: string
        detailsUrl:
          format: uri
          type: string
    IssuesMoveInfosModel:
      type: object
      properties:
        moveInfos:
          type: array
          items:
            $ref: '#/components/schemas/IssuesMoveInfoEntity'
        pagination:
          $ref: '#/components/schemas/PaginationData'
    ItemsDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        count:
          format: int64
          type: integer
        singular:
          type: boolean
        label:
          $ref: '#/components/schemas/Translatable'
        value:
          $ref: '#/components/schemas/Translatable'
    KanbanIssueLabel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    KanbanIssueStatus:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    KanbanIssueType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    KanbanLaneEntity:
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        issueBoardId:
          type: string
        name:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/KanbanIssueStatus'
        types:
          type: array
          items:
            $ref: '#/components/schemas/KanbanIssueType'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/KanbanIssueLabel'
        sortOrder:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/KanbanLaneSort'
    KanbanLaneSort:
      type: object
      properties:
        sort:
          type: string
        direction:
          type: string
    Label:
      type: object
      properties:
        labelType:
          type: string
        ref:
          type: string
        labelGroupName:
          type: string
        name:
          type: string
        color:
          type: string
        deleted:
          type: boolean
        doTranslate:
          type: boolean
        pjax:
          type: boolean
        fontColor:
          type: string
        borderColor:
          type: string
        showBorder:
          type: boolean
        collectionRef:
          $ref: '#/components/schemas/LabelCollectionRef'
        openIssues:
          $ref: '#/components/schemas/NumericValue'
        closedIssues:
          $ref: '#/components/schemas/NumericValue'
        candidateIssues:
          $ref: '#/components/schemas/NumericValue'
        documents:
          $ref: '#/components/schemas/NumericValue'
        openIssuesUrl:
          format: uri
          type: string
        closedIssuesUrl:
          format: uri
          type: string
        candidateIssuesUrl:
          format: uri
          type: string
        documentsUrl:
          format: uri
          type: string
        openUrl:
          format: uri
          type: string
        closedUrl:
          format: uri
          type: string
        candidateUrl:
          format: uri
          type: string
    LabelCollectionRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    LabelItemErrorType:
      enum:
      - UNAUTHORIZED
      - MISSING_LABEL
      type: string
    LabelItemsResultLibraryItem:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/LabelItemErrorType'
              item:
                $ref: '#/components/schemas/LibraryItem'
        items:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
    LabelRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    LengthUnit:
      enum:
      - meter
      - centimeter
      - millimeter
      - feet
      - inch
      - inch-fraction
      type: string
    LibrariesView:
      type: object
      properties:
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
        context:
          $ref: '#/components/schemas/ArenaViewContext'
        randomId:
          type: string
        languageTag:
          type: string
        iconsVersion:
          format: int32
          type: integer
        title:
          type: array
          items:
            $ref: '#/components/schemas/Translatable'
        alert:
          $ref: '#/components/schemas/Alert'
        templateChain:
          type: array
          items:
            type: string
        reactViewData:
          type: object
          additionalProperties: {}
        reporter:
          $ref: '#/components/schemas/Reporter'
        currentTemplate:
          type: string
        yield:
          type: string
        translationsMap:
          type: string
        randomString:
          type: string
        user:
          $ref: '#/components/schemas/User'
        useFullWidth:
          type: boolean
        hasAdministratorAccess:
          type: boolean
        accessibleFeatureStage:
          $ref: '#/components/schemas/FeatureStage'
        templates:
          type: array
          items:
            $ref: '#/components/schemas/HtmlTemplate'
        reactViewId:
          type: string
        responsiveBreadcrumb:
          $ref: '#/components/schemas/ResponsiveBreadcrumb'
        viewSettings:
          type: object
          additionalProperties:
            type: boolean
        locale:
          type: object
        signinUrl:
          format: uri
          type: string
        currentYear:
          format: int32
          type: integer
        hasAlphaAccess:
          type: boolean
        hasInternalAccess:
          type: boolean
        featureMap:
          type: object
          additionalProperties:
            type: boolean
        projectName:
          type: string
        projectId:
          type: string
        imageUrl:
          format: uri
          type: string
        revisionsUrl:
          format: uri
          type: string
        modelsUrl:
          format: uri
          type: string
        modelsSelectUrl:
          format: uri
          type: string
        viewer2dUrl:
          format: uri
          type: string
        viewer2dDefaultUrl:
          format: uri
          type: string
        viewer2dRotationUrl:
          format: uri
          type: string
        geoUrl:
          format: uri
          type: string
        inspectProductsUrl:
          format: uri
          type: string
        inspectIssuesUrl:
          format: uri
          type: string
        inspectIssueNumbersUrl:
          format: uri
          type: string
        inspectLibrariesUrl:
          format: uri
          type: string
        libraryPushEvents:
          type: string
        qtoUrl:
          format: uri
          type: string
        workPlanUrl:
          format: uri
          type: string
        canDownloadModels:
          type: boolean
        canUploadModels:
          type: boolean
        geometryStreamingEnabled:
          type: boolean
        tilesUrlPattern:
          type: string
        showPanelToggles:
          type: boolean
        productionViewerJs:
          type: array
          items:
            type: string
        productionViewerCss:
          type: array
          items:
            type: string
        developmentViewerJs:
          type: array
          items:
            type: string
        developmentViewerCss:
          type: array
          items:
            type: string
    Library:
      type: object
      properties:
        settings:
          type: object
          additionalProperties:
            type: string
        id:
          format: int32
          type: integer
        ref:
          $ref: '#/components/schemas/LibraryRef'
        code:
          type: string
        name:
          type: string
        syncedAt:
          format: int64
          type: integer
        syncFailedAt:
          format: int64
          type: integer
        syncsInProgress:
          format: int32
          type: integer
        syncsInProgressUpdatedAt:
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/LibraryType'
        createdBy:
          format: int32
          type: integer
        createdByRef:
          $ref: '#/components/schemas/UserRef'
        createdAt:
          format: date
          type: string
          example: 2022-03-10
        aclId:
          $ref: '#/components/schemas/AclId'
        completeEnabled:
          type: boolean
        project:
          $ref: '#/components/schemas/Project1'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        isDeleted:
          type: boolean
        nameTranslatable:
          type: boolean
        private:
          type: boolean
        deleted:
          type: boolean
    Library1:
      type: object
      properties:
        id:
          format: int32
          type: integer
        ref:
          type: string
        code:
          type: string
        name:
          type: string
        deleted:
          type: boolean
        nameTranslatable:
          type: boolean
        userHasWriteAccess:
          type: boolean
        userHasDeleteAccess:
          type: boolean
        instantiable:
          type: boolean
        supportsLibraryItems:
          type: boolean
        active:
          type: boolean
        emptyPath:
          type: boolean
        selected:
          type: boolean
        pluginIconName:
          type: string
        libraryType:
          type: string
        librarySectionType:
          type: string
        entity: {}
        entries:
          type: array
          items:
            $ref: '#/components/schemas/LibraryFileEntry'
        owner:
          $ref: '#/components/schemas/User'
        ownerId:
          type: string
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          format: date
          type: string
          example: 2022-03-10
        settingsUrl:
          format: uri
          type: string
        libraryItemsUrl:
          format: uri
          type: string
        libraryNames:
          $ref: '#/components/schemas/LibraryNames'
        showLibraryItemIcon:
          type: boolean
        supportZipDownload:
          type: boolean
        syncState:
          $ref: '#/components/schemas/LibrarySyncState'
        plugin:
          $ref: '#/components/schemas/LibraryPlugin'
        shortRef:
          type: string
          deprecated: true
        translateName:
          type: boolean
    LibraryClientStatus:
      type: object
      properties:
        connected:
          type: boolean
    LibraryCompleteModel:
      type: object
      properties:
        completeEnabled:
          type: boolean
    LibraryCompleteUrls:
      type: object
      properties:
        completedUrl:
          format: uri
          type: string
        completeUrl:
          format: uri
          type: string
        uncompleteUrl:
          format: uri
          type: string
    LibraryData:
      type: object
      properties:
        libraryUrls:
          $ref: '#/components/schemas/LibraryUrls'
        library:
          $ref: '#/components/schemas/Library1'
        libraryPlugin:
          $ref: '#/components/schemas/LibraryPlugin'
    LibraryFileEntry:
      type: object
      properties:
        path:
          type: string
        name:
          type: string
        size:
          type: string
        hasThumbnail:
          type: boolean
        isMissing:
          type: boolean
        isTagable:
          type: boolean
        isFolder:
          type: boolean
        isFile:
          type: boolean
        folder:
          type: boolean
        missing:
          type: boolean
        tagable:
          type: boolean
        file:
          type: boolean
    LibraryId:
      type: object
      properties:
        value:
          format: int32
          type: integer
    LibraryItem:
      type: object
      properties:
        name:
          type: string
        fileName:
          type: string
        libraryRef:
          type: string
        ref:
          $ref: '#/components/schemas/LibraryItemRef'
        parentRef:
          $ref: '#/components/schemas/LibraryItemRef'
        assignmentCount:
          format: int64
          type: integer
        labelRefs:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/LabelRef'
        tagable:
          type: boolean
        folder:
          type: boolean
        url:
          format: uri
          type: string
        childrenUrl:
          format: uri
          type: string
        parentUrl:
          format: uri
          type: string
        renameUrl:
          format: uri
          type: string
        downloadUrl:
          type: string
        thumbnailUrl:
          type: string
        previewUrl:
          type: string
        fileSize:
          type: string
        level:
          type: string
        parents:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
        children:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
        fileIcon:
          $ref: '#/components/schemas/IconData'
        associatedIfcGuidsUrl:
          format: uri
          type: string
        moveUrl:
          format: uri
          type: string
        deleteUrl:
          format: uri
          type: string
        externalUrl:
          format: uri
          type: string
        latestVersion:
          format: int32
          type: integer
        read:
          type: boolean
        write:
          type: boolean
        fullAccess:
          type: boolean
        owner:
          $ref: '#/components/schemas/Contact'
        deleted:
          type: boolean
        hidden:
          type: boolean
        entity: {}
        type:
          type: string
        assigned:
          type: boolean
        assignmentCountPlural:
          type: boolean
        pdf:
          type: boolean
    LibraryItemAndFile:
      type: object
      properties:
        libraryItem:
          $ref: '#/components/schemas/LibraryItem'
        file:
          $ref: '#/components/schemas/LibraryItemFile'
    LibraryItemChildren:
      type: object
      properties:
        libraryRef:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
        pagination:
          $ref: '#/components/schemas/PaginationData'
        canBeMovedFrom:
          type: boolean
        error:
          $ref: '#/components/schemas/LibraryItemError'
        nextToFetch:
          type: array
          items:
            format: uri
            type: string
        nextUrl:
          type: string
    LibraryItemCollectionRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    LibraryItemError:
      type: object
      properties:
        errorMessage:
          type: string
        owner:
          $ref: '#/components/schemas/Contact'
        libraryOwner:
          type: boolean
        librarySettingsUrl:
          format: uri
          type: string
        alertInfo:
          type: boolean
        refreshPushMessages:
          type: array
          items:
            type: string
        refreshPushMessagesJSON:
          type: string
    LibraryItemFile:
      type: object
      properties:
        draft:
          type: boolean
        version:
          format: int32
          type: integer
        id:
          type: string
        fileName:
          type: string
        libraryType:
          type: string
        entity: {}
    LibraryItemRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
        external:
          type: boolean
    LibraryItemUrls:
      type: object
      properties:
        associatedIfcGuidsUrl:
          format: uri
          type: string
    LibraryItems:
      type: object
      properties:
        libraryItem:
          $ref: '#/components/schemas/LibraryItem'
        navigationRefs:
          type: array
          items:
            type: string
        breadcrumbs:
          $ref: '#/components/schemas/Breadcrumbs'
        contextMenu:
          $ref: '#/components/schemas/ContextMenu'
        showOwner:
          type: boolean
        showComplete:
          type: boolean
        expandFilter:
          type: boolean
        bimsyncAdmin:
          type: boolean
        libraryRef:
          type: string
        contentFetchedAt:
          format: int64
          type: integer
        libraryItemUrls:
          $ref: '#/components/schemas/LibraryItemUrls'
        filter:
          $ref: '#/components/schemas/Filter'
        breadcrumbDropdownMenu:
          $ref: '#/components/schemas/BreadcrumbDropdownMenu'
        alphaUser:
          type: boolean
    LibraryItemsPage:
      type: object
      properties:
        libraryData:
          $ref: '#/components/schemas/LibraryData'
        libraryItems:
          $ref: '#/components/schemas/LibraryItems'
    LibraryItemsParam:
      type: object
      properties:
        refs:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItemRef'
        filterParameters:
          type: object
          additionalProperties:
            type: string
        allInFilter:
          type: boolean
    LibraryItemsRedirectResult:
      type: object
      properties:
        url:
          format: uri
          type: string
        postData:
          $ref: '#/components/schemas/LibraryItemsParam'
    LibraryLinkedResult:
      type: object
      properties:
        ifcGuids:
          type: array
          items:
            type: string
        date:
          format: date
          type: string
          example: 2022-03-10
    LibraryNames:
      type: object
      properties:
        singularItemName:
          type: string
        pluralItemName:
          type: string
        itemDetermined:
          type: string
    LibraryNavigationBar:
      type: object
      properties:
        breadcrumbs:
          $ref: '#/components/schemas/Breadcrumbs'
        breadcrumbDropdownMenu:
          $ref: '#/components/schemas/BreadcrumbDropdownMenu'
        contextMenu:
          $ref: '#/components/schemas/ContextMenu'
    LibraryPage:
      type: object
      properties:
        libraryData:
          $ref: '#/components/schemas/LibraryData'
        navigationBar:
          $ref: '#/components/schemas/NavigationBar'
    LibraryPlugin:
      type: object
      properties:
        pluginId:
          $ref: '#/components/schemas/LibraryPluginId1'
        iconName:
          type: string
        title:
          type: string
        description:
          type: string
        newLibraryUrl:
          format: uri
          type: string
        type:
          type: string
        libraryType:
          $ref: '#/components/schemas/LibrarySectionType'
        featureStage:
          $ref: '#/components/schemas/FeatureStage'
    LibraryPluginId:
      type: object
      properties:
        value:
          format: uuid
          pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
          type: string
    LibraryPluginId1:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    LibraryRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    LibraryRequest:
      type: object
      properties:
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole'
        userRef:
          $ref: '#/components/schemas/UserRef'
        userId:
          $ref: '#/components/schemas/UserId'
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
        core:
          $ref: '#/components/schemas/CoreLibraryRequest'
        simple:
          $ref: '#/components/schemas/Simple3'
        libraryRef:
          $ref: '#/components/schemas/LibraryRef'
        libraryId:
          $ref: '#/components/schemas/LibraryId'
        libraryType:
          $ref: '#/components/schemas/LibraryType'
        librarySectionType:
          $ref: '#/components/schemas/LibrarySectionType'
    LibrarySectionType:
      enum:
      - DOCUMENTS
      - GENERIC
      type: string
    LibrarySyncState:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/LibrarySyncStateType'
        lastSyncedAt:
          format: int64
          type: integer
        lastFailedAt:
          format: int64
          type: integer
    LibrarySyncStateType:
      enum:
      - NOT_SYNCED
      - SYNCING
      - SYNCED
      - SYNC_FAILED
      type: string
    LibraryType:
      enum:
      - COBUILDER_DOCUMENT
      - COBUILDER_PRODUCT
      - BSDD
      - DOCUMENT
      - DROPBOX
      - SHAREPOINT
      - EMBEDDED_CLASSIFICATION
      - EMBEDDED_VALUE
      - LOOKUP
      - CLASSIFICATION
      - LINK
      type: string
    LibraryUrls:
      type: object
      properties:
        libraryLinkUrl:
          format: uri
          type: string
        libraryUnlinkUrl:
          format: uri
          type: string
        libraryLinkedUrl:
          format: uri
          type: string
        downloadZipUrl:
          format: uri
          type: string
        moveItemsHereUrl:
          format: uri
          type: string
        deleteItemsUrl:
          format: uri
          type: string
        libraryAclUrl:
          format: uri
          type: string
        restoreUrl:
          format: uri
          type: string
        completeUrls:
          $ref: '#/components/schemas/LibraryCompleteUrls'
    LibraryWithLibraryItems:
      type: object
      properties:
        library:
          $ref: '#/components/schemas/Library1'
        libraryItems:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
    Link:
      type: object
      properties:
        url:
          type: string
    LinkDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        currentUrl:
          format: uri
          type: string
        count:
          format: int64
          type: integer
        linked:
          type: boolean
        unlinked:
          type: boolean
        backlinked:
          type: boolean
        libraryRef:
          $ref: '#/components/schemas/LibraryRef'
        label:
          $ref: '#/components/schemas/Translatable'
        value:
          $ref: '#/components/schemas/Translatable'
    LinkStatus:
      enum:
      - UNLINKED
      - OK
      type: string
    LinkedApp:
      type: object
      properties:
        name:
          type: string
        clientId:
          type: string
        enabled:
          type: boolean
        revokeAccessUrl:
          format: uri
          type: string
    LocaleSettings:
      type: object
      properties:
        lengthUnit:
          $ref: '#/components/schemas/LengthUnit'
    LookupLibraryGET:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/LibraryRef'
        name:
          type: string
        description:
          type: string
        homepageUrl:
          type: string
        templateUrl:
          type: string
        lookupPath:
          type: string
        defaultOpenInNewTab:
          type: boolean
    MarkupBuilderObject:
      type: object
      properties:
        tagStack:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        writer:
          type: object
        attributes:
          type: object
          additionalProperties:
            type: string
        bindings:
          type: object
          additionalProperties: {}
        previousBuilder:
          $ref: '#/components/schemas/MarkupBuilderObject'
        depth:
          format: int32
          type: integer
        namespacePrefix:
          type: string
        previousIndenter:
          $ref: '#/components/schemas/Indenter'
        indenter:
          $ref: '#/components/schemas/Indenter'
        self: {}
    Matrix3:
      type: object
      properties:
        elements:
          type: array
          items:
            format: double
            type: number
    Member:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        ref:
          $ref: '#/components/schemas/UserRef'
        shortRef:
          type: string
        hasAvatar:
          type: boolean
        avatarETag:
          type: string
        userType:
          $ref: '#/components/schemas/UserType'
        createdAt:
          format: int64
          type: integer
        organization:
          type: boolean
        team:
          type: boolean
        avatarUrl:
          format: uri
          type: string
        initials:
          type: string
        user:
          type: boolean
        unlinked:
          type: boolean
        url:
          format: uri
          type: string
        owner:
          type: boolean
        role:
          $ref: '#/components/schemas/ProjectRole1'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole1'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamLabelItem'
        missingProjectAccessMessage:
          $ref: '#/components/schemas/Translatable'
        member:
          type: boolean
    MemberIssueStats:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        ref:
          $ref: '#/components/schemas/UserRef'
        shortRef:
          type: string
        hasAvatar:
          type: boolean
        avatarETag:
          type: string
        userType:
          $ref: '#/components/schemas/UserType'
        createdAt:
          format: int64
          type: integer
        organization:
          type: boolean
        team:
          type: boolean
        avatarUrl:
          format: uri
          type: string
        initials:
          type: string
        user:
          type: boolean
        unlinked:
          type: boolean
        assignedCount:
          $ref: '#/components/schemas/NumericValue'
        url:
          format: uri
          type: string
        hidden:
          type: boolean
        isUnassigned:
          type: boolean
        unassigned:
          type: boolean
    MemberIssueStatsReact:
      type: object
      properties:
        count:
          format: int64
          type: integer
        url:
          format: uri
          type: string
        userId:
          type: string
        userType:
          type: string
        isUnassigned:
          type: boolean
        unassigned:
          type: boolean
    Mergabillity:
      type: object
      properties:
        units:
          type: object
          additionalProperties:
            type: string
        projectGlobalId:
          type: string
    Meter:
      type: object
      properties:
        m1Rate:
          $ref: '#/components/schemas/EWMA'
        m5Rate:
          $ref: '#/components/schemas/EWMA'
        m15Rate:
          $ref: '#/components/schemas/EWMA'
        count:
          type: object
        startTime:
          format: int64
          type: integer
        rateUnit:
          type: object
        eventType:
          type: string
        future:
          type: object
        clock:
          $ref: '#/components/schemas/Clock'
    Milestone:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/MilestoneRef'
        name:
          type: string
        description:
          type: string
        dueDate:
          format: int64
          type: integer
        closed:
          type: boolean
        url:
          format: uri
          type: string
        toggleClosedUrl:
          format: uri
          type: string
        milestoneStats:
          $ref: '#/components/schemas/MilestoneStats'
        statusIsClosed:
          type: boolean
        milestoneDueDate:
          $ref: '#/components/schemas/DueDate'
        formattedDueDate:
          type: string
        milestoneLabel:
          $ref: '#/components/schemas/MilestoneLabel'
    MilestoneLabel:
      type: object
      properties:
        labelType:
          type: string
        ref:
          type: string
        labelGroupName:
          type: string
        name:
          type: string
        color:
          type: string
        deleted:
          type: boolean
        doTranslate:
          type: boolean
        pjax:
          type: boolean
        fontColor:
          type: string
        borderColor:
          type: string
        showBorder:
          type: boolean
    MilestoneListResult:
      type: object
      properties:
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'
    MilestoneRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    MilestoneStats:
      type: object
      properties:
        allBoardsStats:
          $ref: '#/components/schemas/IssueBoardStats'
        issueBoardStats:
          type: array
          items:
            $ref: '#/components/schemas/IssueBoardStats'
        archivedBoardStats:
          type: array
          items:
            $ref: '#/components/schemas/IssueBoardStats'
        multipleBoards:
          type: boolean
    MilestoneWithIssueBoardsStats:
      type: object
      properties:
        milestone:
          $ref: '#/components/schemas/Milestone'
        stats:
          $ref: '#/components/schemas/IssueStatsReact'
        issueBoardStats:
          type: array
          items:
            $ref: '#/components/schemas/IssueBoardWithStats'
        archivedBoardStats:
          type: array
          items:
            $ref: '#/components/schemas/IssueBoardWithStats'
    MilestoneWithStats:
      type: object
      properties:
        milestone:
          $ref: '#/components/schemas/Milestone'
        stats:
          $ref: '#/components/schemas/IssueStatsReact'
    Model:
      type: object
      properties:
        modelRef:
          $ref: '#/components/schemas/ModelRef'
        name:
          type: string
        referenceModel:
          $ref: '#/components/schemas/Model'
        url:
          format: uri
          type: string
        imageUrl:
          format: uri
          type: string
        imageIconUrl:
          format: uri
          type: string
        imageUploadUrl:
          format: uri
          type: string
        imageRemoveUrl:
          format: uri
          type: string
        uploadImportUrl:
          format: uri
          type: string
        submitImportUrl:
          format: uri
          type: string
        changeReferenceModelUrl:
          format: uri
          type: string
        changeModelNameUrl:
          format: uri
          type: string
        removeModelUrl:
          format: uri
          type: string
        pushNewRevision:
          type: string
        pushImportCompleted:
          type: string
        pushImportFailed:
          type: string
        lastRevisions:
          type: array
          items:
            $ref: '#/components/schemas/Revision'
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/Revision'
        imports:
          type: array
          items:
            $ref: '#/components/schemas/Import'
        transform:
          $ref: '#/components/schemas/TransformViewData'
        selected:
          type: boolean
        libraryItemRef:
          $ref: '#/components/schemas/LibraryItemRef'
        transformDataAttributes:
          type: string
        transformJSON:
          type: string
        lastRevision:
          $ref: '#/components/schemas/Revision'
        lastRevisionWithGeometry:
          $ref: '#/components/schemas/Revision'
        shortName:
          type: string
    ModelGET:
      type: object
      properties:
        ref:
          type: string
        name:
          type: string
    ModelRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    ModelRevision:
      type: object
      properties:
        modelRef:
          $ref: '#/components/schemas/ModelRef'
        revisionRef:
          $ref: '#/components/schemas/RevisionRef'
    Modifier:
      type: object
      properties:
        param:
          type: string
        value:
          type: string
    MoveDocumentsViewModel:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentWithCurrentRevision'
        documentsUrl:
          format: uri
          type: string
        executeUrl:
          format: uri
          type: string
        parentId:
          type: string
    MoveResult:
      type: object
      properties:
        failure:
          type: boolean
        errorMessage:
          type: string
        issuesNotFound:
          uniqueItems: true
          type: array
          items:
            format: int32
            type: integer
        failedIssues:
          type: array
          items:
            $ref: '#/components/schemas/IssueMoveResult'
        movedIssues:
          type: array
          items:
            $ref: '#/components/schemas/IssueMoveResult'
    MultivaluedMapStringString:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    NamingConventionReferenceEntity:
      type: object
      properties:
        id:
          type: string
        root:
          type: boolean
    NavigationBar:
      type: object
      properties:
        breadcrumbs:
          $ref: '#/components/schemas/Breadcrumbs'
        dropdownMenu:
          $ref: '#/components/schemas/BreadcrumbDropdownMenu'
        contextMenu:
          $ref: '#/components/schemas/ContextMenu'
    NewLibraryItemEntity:
      required:
      - name
      type: object
      properties:
        name:
          type: string
        parentId:
          type: string
        parentIdIsSet:
          type: boolean
        failOnDocumentExists:
          type: boolean
        document:
          $ref: '#/components/schemas/Document'
        classification:
          $ref: '#/components/schemas/Classification'
        link:
          $ref: '#/components/schemas/Link'
    NotificationEventNode:
      type: object
      properties:
        name:
          type: string
        group:
          type: string
        subGroup:
          type: string
        locale:
          type: object
        feature:
          $ref: '#/components/schemas/Feature'
        enabled:
          type: boolean
        id:
          type: string
    NotificationPluginType:
      enum:
      - APP
      - MAIL
      - SLACK
      - TEAMS
      type: string
    NumericValue:
      type: object
      properties:
        value:
          format: int64
          type: integer
        zero:
          type: boolean
        plural:
          type: boolean
        singular:
          type: boolean
    ObjectCache:
      type: object
    ObjectState:
      type: object
      properties:
        selected:
          type: array
          items:
            type: string
        hidden:
          type: array
          items:
            type: string
        visible:
          type: array
          items:
            type: string
        translucent:
          type: array
          items:
            type: string
    OnFileExists:
      enum:
      - CREATE_NEW_REVISION
      - IGNORE
      - FAIL
      type: string
    OptionalBreadcrumbFilePicker:
      type: object
      properties:
        present:
          type: boolean
    OptionalBreadcrumbModal:
      type: object
      properties:
        present:
          type: boolean
    OptionalModel:
      type: object
      properties:
        present:
          type: boolean
    OptionalString:
      type: object
      properties:
        present:
          type: boolean
    OptionalUser:
      type: object
      properties:
        present:
          type: boolean
    PageData:
      type: object
      properties:
        url:
          type: string
        label:
          type: string
        active:
          type: boolean
    PagedResultBookmarkEntity:
      type: object
      properties:
        page:
          format: int32
          type: integer
        totalItems:
          format: int64
          type: integer
        perPage:
          format: int32
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/BookmarkEntity'
        totalPages:
          format: int64
          type: integer
    PaginatedResponseApprovalEventEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalEventEntity'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseApprovalFileEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalFileEntity'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseApprovalRequestEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalRequestEntity'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseCollectionFileEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CollectionFileEntity'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseIssuePointWithColorAndAccess:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssuePointWithColorAndAccess'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseIssueTemplateEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssueTemplateEntity'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseIssuesMoveInfoEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssuesMoveInfoEntity'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseLibraryItem:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LibraryItem'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseMilestoneWithStats:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/MilestoneWithStats'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseShareItem:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ShareItem'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginatedResponseZipUploadEntity:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ZipUploadEntity'
        pagination:
          $ref: '#/components/schemas/PaginationEntity'
    PaginationData:
      type: object
      properties:
        pageKey:
          type: string
        limitKey:
          type: string
        page:
          format: int32
          type: integer
        perPage:
          format: int32
          type: integer
        total:
          format: int64
          type: integer
        url:
          format: uri
          type: string
        pjax:
          type: boolean
        pjaxPushState:
          type: boolean
        PJAXContainer:
          type: string
        empty:
          type: boolean
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        enabled:
          type: boolean
        prevEnabled:
          type: boolean
        prevUrl:
          type: string
        nextEnabled:
          type: boolean
        nextUrl:
          type: string
        pjaxContainer:
          type: string
        pJAXContainer:
          type: string
        pages:
          type: array
          items:
            $ref: '#/components/schemas/PageData'
    PaginationEntity:
      type: object
      properties:
        totalCount:
          format: int64
          type: integer
    PathSegment:
      type: object
      properties:
        path:
          type: string
        matrixParameters:
          $ref: '#/components/schemas/MultivaluedMapStringString'
    Point:
      type: object
      properties:
        x:
          format: double
          type: number
        "y":
          format: double
          type: number
        z:
          format: double
          type: number
    Point1:
      type: object
      properties:
        x:
          format: double
          type: number
        "y":
          format: double
          type: number
    PrincipalAuthenticator:
      type: object
    ProductionAssets:
      type: object
      properties:
        cdnBaseUri:
          format: uri
          type: string
        apiBaseUri:
          format: uri
          type: string
        viewerJs:
          type: array
          items:
            type: string
        viewerBetaJs:
          type: array
          items:
            type: string
        viewerDevJs:
          type: array
          items:
            type: string
        js:
          type: array
          items:
            type: string
        css:
          type: array
          items:
            type: string
    Project:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProjectRef'
        name:
          type: string
        description:
          type: string
        starred:
          type: boolean
        projectPlan:
          $ref: '#/components/schemas/ProjectPlanEntity'
        image:
          type: boolean
        updateTime:
          format: int64
          type: integer
        imageETag:
          type: string
        geoData:
          $ref: '#/components/schemas/ProjectGeoData'
        toggleStarUrl:
          format: uri
          type: string
        starUrl:
          format: uri
          type: string
        unStarUrl:
          format: uri
          type: string
        url:
          format: uri
          type: string
        owner:
          $ref: '#/components/schemas/User'
        imageUrl:
          format: uri
          type: string
        sidebarImageUrl:
          format: uri
          type: string
    Project1:
      type: object
      properties:
        id:
          format: int32
          type: integer
        ref:
          $ref: '#/components/schemas/ProjectRef'
        name:
          type: string
        type:
          $ref: '#/components/schemas/ProjectType'
        description:
          type: string
        createdAt:
          format: date
          type: string
          example: 2022-03-10
        updatedAt:
          format: date
          type: string
          example: 2022-03-10
        deleted:
          type: boolean
        competition:
          type: boolean
    ProjectAclType:
      enum:
      - ADD_ISSUE_BOARD
      - INVITE_USER
      - EDIT_DOCUMENT_STATUS
      - UPLOAD_DOCUMENT_DRAFTS
      - ADD_MODEL
      - DOWNLOAD_MODELS
      - UPLOAD_MODELS
      type: string
    ProjectFeatureLevel:
      enum:
      - FULL
      - FREEMIUM
      type: string
    ProjectGeoData:
      type: object
      properties:
        longitude:
          format: double
          type: number
        latitude:
          format: double
          type: number
        north:
          format: double
          type: number
    ProjectId:
      type: object
      properties:
        value:
          format: int32
          type: integer
    ProjectLimitsSettings:
      type: object
      properties:
        bcfUploadLimit:
          format: int64
          type: integer
    ProjectMember:
      type: object
      properties:
        userId:
          format: int32
          type: integer
        role:
          $ref: '#/components/schemas/ProjectRole'
        isDeleted:
          type: boolean
        deleted:
          type: boolean
    ProjectMembersResult:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        teamRelations:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          deprecated: true
        userTeamsRelation:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        teamUsersRelation:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        userRefs:
          uniqueItems: true
          type: array
          items:
            type: string
        teamRefs:
          uniqueItems: true
          type: array
          items:
            type: string
        organizationRefs:
          uniqueItems: true
          type: array
          items:
            type: string
    ProjectPlanEntity:
      type: object
      properties:
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        expiration:
          format: date
          type: string
          example: 2022-03-10
        featureLevel:
          type: string
    ProjectRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    ProjectRequest:
      type: object
      properties:
        userRef:
          $ref: '#/components/schemas/UserRef'
        userId:
          $ref: '#/components/schemas/UserId'
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
        core:
          $ref: '#/components/schemas/CoreProjectRequest'
        simple:
          $ref: '#/components/schemas/Simple1'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        projectId:
          $ref: '#/components/schemas/ProjectId'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole'
    ProjectRole:
      enum:
      - OWNER
      - ADMIN
      - MEMBER
      type: string
    ProjectRole1:
      enum:
      - OWNER
      - ADMIN
      - MEMBER
      - NOT_MEMBER
      type: string
    ProjectType:
      enum:
      - PROJECT
      - COMPETITION
      - COMPETITION_ENTRY
      - COMPETITION_REVIEW
      - APP_PROJECT
      type: string
    ProjectUserAccessSettingsEntity:
      type: object
      properties:
        canCreateIssueBoard:
          type: boolean
        canInviteMembers:
          type: boolean
        canWriteToDocumentRootFolder:
          type: boolean
        canCreateModels:
          type: boolean
        canDeleteModels:
          type: boolean
        canDownloadModels:
          type: boolean
        canEditDocumentStatus:
          type: boolean
        canViewDocumentDrafts:
          type: boolean
        canCreateDocumentDrafts:
          type: boolean
    ProjectUsersResult:
      type: object
      properties:
        usersAndTeams:
          type: array
          items:
            $ref: '#/components/schemas/User'
        teamRelations:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          deprecated: true
        userTeamsRelation:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        teamUsersRelation:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        userRefs:
          uniqueItems: true
          type: array
          items:
            type: string
        teamRefs:
          uniqueItems: true
          type: array
          items:
            type: string
    Punctuation:
      enum:
      - END_WITH_PERIOD
      - NONE
      type: string
    PushProvider:
      type: object
      properties:
        url:
          type: string
    QtoColDef:
      type: object
      properties:
        headerName:
          type: string
        field:
          type: string
        numberValues:
          type: boolean
        unit:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/QtoColDef'
    QtoGrid:
      type: object
      properties:
        columnDefs:
          type: array
          items:
            $ref: '#/components/schemas/QtoColDef'
        rows:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        footerRow:
          type: object
          additionalProperties:
            type: string
    QueryFilterItem:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/FilterItemType'
        label:
          $ref: '#/components/schemas/FilterLabel'
        selected:
          type: boolean
        key:
          type: string
        operator:
          type: string
        primaryValue:
          type: string
        secondaryValue:
          type: string
    QueryFilters:
      type: object
      properties:
        createNewQuery:
          $ref: '#/components/schemas/CreateQueryFilterItem'
        items:
          type: array
          items:
            $ref: '#/components/schemas/QueryFilterItem'
    QueryRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    QuestionnaireParam:
      type: object
      properties:
        usageType:
          $ref: '#/components/schemas/UsageType'
        role:
          type: string
        phone:
          type: string
        company:
          type: string
        companySize:
          type: string
        industry:
          type: string
        institution:
          type: string
        institutionType:
          type: string
    ReactProjectFeatureSettings:
      type: object
      properties:
        publicSharingDisabled:
          type: boolean
        modelsAsDocumentsEnabled:
          type: boolean
        productsEnabled:
          type: boolean
    ReactProjectSettings:
      type: object
      properties:
        localeSettings:
          $ref: '#/components/schemas/LocaleSettings'
        features:
          $ref: '#/components/schemas/ReactProjectFeatureSettings'
        limits:
          $ref: '#/components/schemas/ProjectLimitsSettings'
        infectedFileOption:
          type: string
    ReactProjectView:
      type: object
      properties:
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
        context:
          $ref: '#/components/schemas/ArenaViewContext'
        randomId:
          type: string
        languageTag:
          type: string
        iconsVersion:
          format: int32
          type: integer
        title:
          type: array
          items:
            $ref: '#/components/schemas/Translatable'
        alert:
          $ref: '#/components/schemas/Alert'
        templateChain:
          type: array
          items:
            type: string
        reactViewData:
          type: object
          additionalProperties: {}
        reporter:
          $ref: '#/components/schemas/Reporter'
        currentTemplate:
          type: string
        yield:
          type: string
        translationsMap:
          type: string
        randomString:
          type: string
        user:
          $ref: '#/components/schemas/User'
        useFullWidth:
          type: boolean
        hasAdministratorAccess:
          type: boolean
        accessibleFeatureStage:
          $ref: '#/components/schemas/FeatureStage'
        templates:
          type: array
          items:
            $ref: '#/components/schemas/HtmlTemplate'
        reactViewId:
          type: string
        responsiveBreadcrumb:
          $ref: '#/components/schemas/ResponsiveBreadcrumb'
        viewSettings:
          type: object
          additionalProperties:
            type: boolean
        locale:
          type: object
        signinUrl:
          format: uri
          type: string
        currentYear:
          format: int32
          type: integer
        hasAlphaAccess:
          type: boolean
        hasInternalAccess:
          type: boolean
        featureMap:
          type: object
          additionalProperties:
            type: boolean
        projectName:
          type: string
        projectId:
          type: string
        imageUrl:
          format: uri
          type: string
        revisionsUrl:
          format: uri
          type: string
        modelsUrl:
          format: uri
          type: string
        modelsSelectUrl:
          format: uri
          type: string
        viewer2dUrl:
          format: uri
          type: string
        viewer2dDefaultUrl:
          format: uri
          type: string
        viewer2dRotationUrl:
          format: uri
          type: string
        geoUrl:
          format: uri
          type: string
        inspectProductsUrl:
          format: uri
          type: string
        inspectIssuesUrl:
          format: uri
          type: string
        inspectIssueNumbersUrl:
          format: uri
          type: string
        inspectLibrariesUrl:
          format: uri
          type: string
        libraryPushEvents:
          type: string
        qtoUrl:
          format: uri
          type: string
        workPlanUrl:
          format: uri
          type: string
        canDownloadModels:
          type: boolean
        canUploadModels:
          type: boolean
        geometryStreamingEnabled:
          type: boolean
        tilesUrlPattern:
          type: string
        showPanelToggles:
          type: boolean
        productionViewerJs:
          type: array
          items:
            type: string
        productionViewerCss:
          type: array
          items:
            type: string
        developmentViewerJs:
          type: array
          items:
            type: string
        developmentViewerCss:
          type: array
          items:
            type: string
    ReactView:
      type: object
      properties:
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
        context:
          $ref: '#/components/schemas/ArenaViewContext'
        randomId:
          type: string
        languageTag:
          type: string
        iconsVersion:
          format: int32
          type: integer
        title:
          type: array
          items:
            $ref: '#/components/schemas/Translatable'
        alert:
          $ref: '#/components/schemas/Alert'
        templateChain:
          type: array
          items:
            type: string
        reactViewData:
          type: object
          additionalProperties: {}
        reporter:
          $ref: '#/components/schemas/Reporter'
        currentTemplate:
          type: string
        yield:
          type: string
        translationsMap:
          type: string
        randomString:
          type: string
        user:
          $ref: '#/components/schemas/User'
        useFullWidth:
          type: boolean
        hasAdministratorAccess:
          type: boolean
        accessibleFeatureStage:
          $ref: '#/components/schemas/FeatureStage'
        templates:
          type: array
          items:
            $ref: '#/components/schemas/HtmlTemplate'
        reactViewId:
          type: string
        responsiveBreadcrumb:
          $ref: '#/components/schemas/ResponsiveBreadcrumb'
        viewSettings:
          type: object
          additionalProperties:
            type: boolean
        locale:
          type: object
        signinUrl:
          format: uri
          type: string
        currentYear:
          format: int32
          type: integer
        hasAlphaAccess:
          type: boolean
        hasInternalAccess:
          type: boolean
        featureMap:
          type: object
          additionalProperties:
            type: boolean
    ReferenceDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        currentUrl:
          format: uri
          type: string
        count:
          format: int64
          type: integer
        singular:
          type: boolean
    RemoveCommentAndViewpointData:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/RemoveCommentData'
        viewpoint:
          $ref: '#/components/schemas/RemoveViewpointData'
    RemoveCommentData:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/IssueComment'
        canEdit:
          type: boolean
    RemoveViewpointData:
      type: object
      properties:
        viewDataRef:
          type: string
        canDelete:
          type: boolean
        linkedComments:
          type: array
          items:
            $ref: '#/components/schemas/RemoveCommentData'
    RemovedUserOrMember:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        isTeam:
          type: boolean
        team:
          type: boolean
    RenewLibraryAccessResult:
      type: object
      properties:
        success:
          type: boolean
        redirectUrl:
          type: string
    Reporter:
      type: object
    ResolvedInviteResult:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        emailWithNameAndTeam:
          $ref: '#/components/schemas/EmailWithNameAndTeams'
        failedMessage:
          type: string
        role:
          $ref: '#/components/schemas/ProjectRole'
    ResolvedInvitesResult:
      type: object
      properties:
        ok:
          type: array
          items:
            $ref: '#/components/schemas/ResolvedInviteResult'
        failed:
          type: array
          items:
            $ref: '#/components/schemas/ResolvedInviteResult'
    ResolvedInvitesView:
      type: object
      properties:
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
        context:
          $ref: '#/components/schemas/ArenaViewContext'
        locale:
          type: object
        randomId:
          type: string
        languageTag:
          type: string
        iconsVersion:
          format: int32
          type: integer
        templateChain:
          type: array
          items:
            type: string
        currentTemplate:
          type: string
        componentTemplateName:
          type: string
        yield:
          type: string
        result:
          $ref: '#/components/schemas/ResolvedInvitesResult'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        showTeamSelect:
          type: boolean
        showRoleSelect:
          type: boolean
    ResponsiveBreadcrumb:
      type: object
      properties:
        actions:
          $ref: '#/components/schemas/BreadcrumbActions'
        trail:
          type: array
          items:
            $ref: '#/components/schemas/BreadcrumbAction'
        title:
          $ref: '#/components/schemas/Translatable'
        titleIsHtml:
          type: boolean
        titleBeforeDropdown:
          type: boolean
        dropdown:
          $ref: '#/components/schemas/BreadcrumbDropdown'
    RestoreLibraryItemsResult:
      type: object
      properties:
        redirectUrl:
          format: uri
          type: string
    Revision:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RevisionId'
        title:
          type: string
        comment:
          type: string
        version:
          format: int64
          type: integer
        createdTime:
          format: int64
          type: integer
        createdMember:
          $ref: '#/components/schemas/Contact'
        schema:
          type: string
        geometry:
          type: boolean
        grid:
          type: boolean
        url:
          format: uri
          type: string
        geometryUrl:
          format: uri
          type: string
        productRelationsUrl:
          format: uri
          type: string
        gridUrl:
          format: uri
          type: string
        treeUrl:
          format: uri
          type: string
        downloadUrl:
          format: uri
          type: string
        model:
          $ref: '#/components/schemas/OptionalModel'
        documentRevisionId:
          $ref: '#/components/schemas/DocumentRevisionId'
        ref:
          $ref: '#/components/schemas/RevisionRef'
        modelRef:
          $ref: '#/components/schemas/ModelRef'
    RevisionId:
      type: object
      properties:
        value:
          type: string
    RevisionId1:
      type: object
      properties:
        value:
          type: string
    RevisionList:
      type: object
      properties:
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/Revision'
    RevisionRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    RevokeLibraryAccessResult:
      type: object
      properties:
        success:
          type: boolean
        redirectUrl:
          type: string
    Rotation:
      type: object
      properties:
        rotation:
          format: float
          type: number
    RotationViewData:
      type: object
      properties:
        x:
          format: double
          type: number
        "y":
          format: double
          type: number
        z:
          format: double
          type: number
        angle:
          format: double
          type: number
        angleInDegrees:
          format: double
          type: number
    Sample:
      type: object
      properties:
        snapshot:
          $ref: '#/components/schemas/Snapshot'
    SavedFilter:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/FilterItemType'
        modifiers:
          type: array
          items:
            $ref: '#/components/schemas/Modifier'
        title:
          type: string
        icon:
          $ref: '#/components/schemas/Icon'
    SavedFilterRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    SavedFilters:
      type: object
      properties:
        label:
          $ref: '#/components/schemas/FilterLabel'
        items:
          type: array
          items:
            $ref: '#/components/schemas/SavedFilter'
    ScannedDownload:
      type: object
      properties:
        downloadUrl:
          type: string
        fileName:
          type: string
        healthy:
          type: boolean
        infected:
          type: boolean
    Script:
      type: object
      properties:
        src:
          type: string
        type:
          type: string
    SearchDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        searchText:
          type: string
        label:
          $ref: '#/components/schemas/Translatable'
        active:
          type: boolean
        value:
          $ref: '#/components/schemas/Translatable'
    SearchFilter:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/FilterItemType'
        label:
          $ref: '#/components/schemas/FilterLabel'
        selected:
          type: boolean
        modifier:
          $ref: '#/components/schemas/Modifier'
        additionalModifiers:
          type: array
          items:
            $ref: '#/components/schemas/Modifier'
    SearchFilter1:
      type: object
      properties:
        searchText:
          type: string
        searchUrl:
          format: uri
          type: string
        dismissUrl:
          format: uri
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/SearchOption'
    SearchFilters:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchFilter'
    SearchOption:
      type: object
      properties:
        parameterName:
          type: string
        title:
          $ref: '#/components/schemas/Translatable'
        searchUrl:
          format: uri
          type: string
    Shape:
      type: object
      properties:
        type:
          type: string
        points:
          type: array
          items:
            $ref: '#/components/schemas/Point1'
    ShareItem:
      type: object
      properties:
        name:
          type: string
        path:
          type: string
        folder:
          type: boolean
    SharepointSharedFolder:
      type: object
      properties:
        site:
          $ref: '#/components/schemas/SiteEntity'
        drive:
          $ref: '#/components/schemas/DriveEntity'
        sharedPath:
          type: string
    SignUpToken:
      type: object
      properties:
        value:
          type: string
    Simple:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/SimpleUser'
    Simple1:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/SimpleUser'
        project:
          $ref: '#/components/schemas/SimpleProject'
        member:
          $ref: '#/components/schemas/SimpleMember'
        featureLevel:
          $ref: '#/components/schemas/ProjectFeatureLevel'
    Simple2:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/SimpleProject'
        member:
          $ref: '#/components/schemas/SimpleMember'
        featureLevel:
          $ref: '#/components/schemas/ProjectFeatureLevel'
        user:
          $ref: '#/components/schemas/SimpleUser'
        issueBoard:
          $ref: '#/components/schemas/SimpleIssueBoard'
    Simple3:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/SimpleProject'
        member:
          $ref: '#/components/schemas/SimpleMember'
        featureLevel:
          $ref: '#/components/schemas/ProjectFeatureLevel'
        user:
          $ref: '#/components/schemas/SimpleUser'
        library:
          $ref: '#/components/schemas/SimpleLibrary'
    SimpleAlert:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AlertId'
        type:
          $ref: '#/components/schemas/AlertType'
        title:
          $ref: '#/components/schemas/Translatable'
        message:
          $ref: '#/components/schemas/Translatable'
        dataCy:
          type: string
    SimpleAppCredentials:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        clientId:
          type: string
        externalClientId:
          type: string
        clientSecret:
          type: string
    SimpleIssueBoard:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/IssueBoardRef'
        projectId:
          $ref: '#/components/schemas/ProjectRef'
        name:
          type: string
        description:
          type: string
        readOnly:
          type: boolean
        boardType:
          $ref: '#/components/schemas/IssueBoardType'
        archived:
          type: boolean
        mail:
          type: boolean
        owner:
          $ref: '#/components/schemas/UserRef'
        createdBy:
          $ref: '#/components/schemas/UserRef'
        createdAt:
          format: int64
          type: integer
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldInstance'
    SimpleLibrary:
      type: object
      properties:
        core:
          $ref: '#/components/schemas/Library'
        id:
          $ref: '#/components/schemas/LibraryId'
        ref:
          $ref: '#/components/schemas/LibraryRef'
        code:
          type: string
        name:
          $ref: '#/components/schemas/Translatable'
        hasItems:
          type: boolean
        itemsEditable:
          type: boolean
        instantiable:
          type: boolean
        supportsLibraryItems:
          type: boolean
        completedEnabled:
          type: boolean
        pluginId:
          $ref: '#/components/schemas/LibraryPluginId'
        pluginIconName:
          type: string
        projectId:
          $ref: '#/components/schemas/ProjectRef'
        type:
          $ref: '#/components/schemas/LibrarySectionType'
        libraryType:
          $ref: '#/components/schemas/LibraryType'
        plugin:
          $ref: '#/components/schemas/SimpleLibraryPlugin'
    SimpleLibraryPlugin:
      type: object
      properties:
        projectId:
          $ref: '#/components/schemas/ProjectRef'
        pluginId:
          $ref: '#/components/schemas/LibraryPluginId1'
        iconName:
          type: string
        title:
          type: string
        description:
          type: string
        libraryType:
          $ref: '#/components/schemas/LibrarySectionType'
        type:
          $ref: '#/components/schemas/LibraryType'
    SimpleMember:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        core:
          $ref: '#/components/schemas/User1'
        id:
          $ref: '#/components/schemas/UserId'
        ref:
          $ref: '#/components/schemas/UserRef'
        username:
          type: string
        type:
          $ref: '#/components/schemas/UserType'
        hasAvatar:
          type: boolean
        avatarETag:
          type: string
        bimsyncAdministrator:
          type: boolean
        bimsyncAlpha:
          type: boolean
        deleted:
          type: boolean
        createdAt:
          format: int64
          type: integer
        project:
          $ref: '#/components/schemas/SimpleProject'
        role:
          $ref: '#/components/schemas/ProjectRole1'
        aggregatedRole:
          $ref: '#/components/schemas/ProjectRole1'
        disableLinks:
          type: boolean
        memberDeleted:
          type: boolean
        projectOwner:
          type: boolean
    SimpleProject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProjectId'
        ref:
          $ref: '#/components/schemas/ProjectRef'
        name:
          type: string
        description:
          type: string
        image:
          type: boolean
        imageETag:
          type: string
        updatedDate:
          format: date
          type: string
          example: 2022-03-10
        core:
          $ref: '#/components/schemas/Project1'
    SimpleUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        core:
          $ref: '#/components/schemas/User1'
        id:
          $ref: '#/components/schemas/UserId'
        ref:
          $ref: '#/components/schemas/UserRef'
        username:
          type: string
        type:
          $ref: '#/components/schemas/UserType'
        hasAvatar:
          type: boolean
        avatarETag:
          type: string
        bimsyncAdministrator:
          type: boolean
        bimsyncAlpha:
          type: boolean
        deleted:
          type: boolean
        createdAt:
          format: int64
          type: integer
    SiteEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SkippedDocumentReference:
      type: object
      properties:
        bcfGuid:
          type: string
        type:
          $ref: '#/components/schemas/SkippedDocumentType'
    SkippedDocumentType:
      enum:
      - INVALID
      - MISSING_FILE
      type: string
    SkippedViewpoint:
      type: object
      properties:
        bcfGuid:
          type: string
        type:
          $ref: '#/components/schemas/SkippedViewpointType'
    SkippedViewpointType:
      enum:
      - INVALID
      type: string
    Snapshot:
      type: object
      properties:
        values:
          type: array
          items:
            format: double
            type: number
        median:
          format: double
          type: number
        "75thPercentile":
          format: double
          type: number
        "95thPercentile":
          format: double
          type: number
        "98thPercentile":
          format: double
          type: number
        "99thPercentile":
          format: double
          type: number
        "999thPercentile":
          format: double
          type: number
    SpatialStructureElementRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    Status:
      enum:
      - OK
      - FAILED
      type: string
    StylesheetConfiguration:
      type: object
      properties:
        preCompile:
          type: string
        preCompileEnabled:
          type: boolean
    SupplierDismiss:
      type: object
      properties:
        dismissUrl:
          format: uri
          type: string
        name:
          type: string
    Tag:
      type: object
      properties:
        depth:
          format: int32
          type: integer
        name:
          type: string
        prefix:
          type: string
        empty:
          type: boolean
        start:
          type: boolean
        end:
          type: boolean
        closePolicy:
          $ref: '#/components/schemas/TagClosingPolicy'
        qualifiedName:
          type: string
        selfClosing:
          type: boolean
    TagClosingPolicy:
      enum:
      - NORMAL
      - SELF
      - PAIR
      type: string
    Team:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        url:
          format: uri
          type: string
        inactiveTeam:
          type: boolean
        role:
          $ref: '#/components/schemas/ProjectRole1'
        member:
          type: boolean
        name:
          type: string
        adminTeam:
          type: boolean
    TeamLabelItem:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        url:
          format: uri
          type: string
        isAdminTeam:
          type: boolean
        adminTeam:
          type: boolean
    Template:
      type: object
      properties:
        tagStack:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        attributes:
          type: object
          additionalProperties:
            type: string
        bindings:
          type: object
          additionalProperties: {}
        previousBuilder:
          $ref: '#/components/schemas/MarkupBuilderObject'
        depth:
          format: int32
          type: integer
        namespacePrefix:
          type: string
        previousIndenter:
          $ref: '#/components/schemas/Indenter'
        indenter:
          $ref: '#/components/schemas/Indenter'
        self:
          $ref: '#/components/schemas/Html'
        writer:
          type: object
    Timer:
      type: object
      properties:
        durationUnit:
          type: object
        rateUnit:
          type: object
        meter:
          $ref: '#/components/schemas/Meter'
        histogram:
          $ref: '#/components/schemas/Histogram'
        clock:
          $ref: '#/components/schemas/Clock'
        snapshot:
          $ref: '#/components/schemas/Snapshot'
    TokenResponse:
      type: object
      properties:
        isValidToken:
          type: boolean
        isAlreadyUser:
          type: boolean
        email:
          type: string
        isInviteToken:
          type: boolean
        projectRef:
          $ref: '#/components/schemas/ProjectRef'
        alreadyUser:
          type: boolean
        validToken:
          type: boolean
        inviteToken:
          type: boolean
    TopicDateStatus:
      enum:
      - MISSING
      - OK
      type: string
    TosContentView:
      type: object
      properties:
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
        context:
          $ref: '#/components/schemas/ArenaViewContext'
        locale:
          type: object
        templateName:
          type: string
          writeOnly: true
        yield:
          type: string
        randomId:
          type: string
        languageTag:
          type: string
        iconsVersion:
          format: int32
          type: integer
    TransformViewData:
      type: object
      properties:
        position:
          $ref: '#/components/schemas/Vector3ViewData'
        rotation:
          $ref: '#/components/schemas/RotationViewData'
        center:
          $ref: '#/components/schemas/Vector3ViewData'
    Translatable:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          additionalProperties: {}
        translate:
          $ref: '#/components/schemas/Translate'
        punctuation:
          $ref: '#/components/schemas/Punctuation'
        html:
          type: boolean
        shouldTranslate:
          type: boolean
        endWithPeriod:
          type: boolean
    Translate:
      enum:
      - DEFAULT
      - SKIP
      type: string
    UnlinkedIssuesResult:
      type: object
      properties:
        contacts:
          type: array
          items:
            type: string
        statuses:
          type: array
          items:
            type: string
        types:
          type: array
          items:
            type: string
        issueBoardUrl:
          format: uri
          type: string
    UpdateCommentResponseEntity:
      type: object
      properties:
        comment:
          type: string
        unformattedComment:
          type: string
        updateTime:
          format: int64
          type: integer
    UploadDocumentDraftModel:
      type: object
      properties:
        uploadLimit:
          format: int64
          type: integer
        uploadLimitByFileType:
          $ref: '#/components/schemas/UploadLimitByFileType'
    UploadDocumentsModel:
      type: object
      properties:
        existingDocuments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ExistingDocument'
        uploadLimit:
          format: int64
          type: integer
        uploadLimitByFileType:
          $ref: '#/components/schemas/UploadLimitByFileType'
        folder:
          $ref: '#/components/schemas/Document1'
        defaultType:
          type: string
        namingConventionId:
          type: string
    UploadLimitByFileType:
      required:
      - types
      type: object
      properties:
        types:
          type: array
          items:
            $ref: '#/components/schemas/FileType'
    UploadModelImageTransformationEntity:
      type: object
      properties:
        x:
          format: int32
          type: integer
        "y":
          format: int32
          type: integer
        width:
          format: int32
          type: integer
        height:
          format: int32
          type: integer
        rotation:
          format: int32
          type: integer
    UriBuilder:
      type: object
    UriInfo:
      type: object
      properties:
        path:
          type: string
        pathSegments:
          type: array
          items:
            $ref: '#/components/schemas/PathSegment'
        requestUri:
          format: uri
          type: string
        requestUriBuilder:
          $ref: '#/components/schemas/UriBuilder'
        absolutePath:
          format: uri
          type: string
        absolutePathBuilder:
          $ref: '#/components/schemas/UriBuilder'
        baseUri:
          format: uri
          type: string
        baseUriBuilder:
          $ref: '#/components/schemas/UriBuilder'
        pathParameters:
          $ref: '#/components/schemas/MultivaluedMapStringString'
        queryParameters:
          $ref: '#/components/schemas/MultivaluedMapStringString'
        matchedURIs:
          type: array
          items:
            type: string
        matchedResources:
          type: array
          items: {}
    UsageType:
      enum:
      - CONSTRUCTION_INFRASTRUCTURE
      - EDUCATIONAL
      - SOFTWARE_DEVELOPMENT
      type: string
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        ref:
          $ref: '#/components/schemas/UserRef'
        shortRef:
          type: string
        hasAvatar:
          type: boolean
        avatarETag:
          type: string
        userType:
          $ref: '#/components/schemas/UserType'
        createdAt:
          format: int64
          type: integer
        organization:
          type: boolean
        team:
          type: boolean
        avatarUrl:
          format: uri
          type: string
        initials:
          type: string
        user:
          type: boolean
        unlinked:
          type: boolean
    User1:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/UserRef'
        externalId:
          type: string
        name:
          type: string
        email:
          type: string
        username:
          type: string
        created:
          format: date
          type: string
          example: 2022-03-10
        updated:
          format: date
          type: string
          example: 2022-03-10
        ownerRef:
          $ref: '#/components/schemas/UserRef'
    UserId:
      type: object
      properties:
        value:
          format: int32
          type: integer
    UserRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    UserRequest:
      type: object
      properties:
        core:
          $ref: '#/components/schemas/CoreUserRequest'
        simple:
          $ref: '#/components/schemas/Simple'
        userRef:
          $ref: '#/components/schemas/UserRef'
        userId:
          $ref: '#/components/schemas/UserId'
        cache:
          $ref: '#/components/schemas/ObjectCache'
        client:
          $ref: '#/components/schemas/Client'
    UserRequestType:
      enum:
      - AS_BIMSYNC_ADMINISTRATOR
      - AS_REGULAR_USER
      type: string
    UserType:
      enum:
      - USER
      - ORGANIZATION
      - TEAM
      type: string
    UserWithAcl:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/UserRef'
        name:
          type: string
        givenAcl:
          $ref: '#/components/schemas/Acl'
        admin:
          type: boolean
        itemOwner:
          type: boolean
        member:
          $ref: '#/components/schemas/Member'
        teamRefs:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserRef'
        acl:
          $ref: '#/components/schemas/Acl'
    ValueType:
      enum:
      - attribute
      - property
      type: string
    Vector3ViewData:
      type: object
      properties:
        x:
          format: double
          type: number
        "y":
          format: double
          type: number
        z:
          format: double
          type: number
    View:
      type: object
      properties:
        templateName:
          type: string
          writeOnly: true
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
    ViewConfiguration:
      required:
      - stylesheet
      type: object
      properties:
        pushUrl:
          type: string
        tilesUrlPattern:
          type: string
        singlePageAppVersion:
          type: string
        gitHubWebhookSecret:
          type: object
          additionalProperties:
            type: string
        development:
          type: boolean
        testEnvironment:
          type: boolean
        developmentXSRF:
          type: boolean
        developmentAnalyticsEnabled:
          type: string
        analyticsEnabled:
          type: boolean
        intercomEnabled:
          type: boolean
        webpackDevServerBaseUrl:
          type: string
        viewer2DUrl:
          type: string
        viewer3DUrl:
          type: string
        stylesheet:
          $ref: '#/components/schemas/StylesheetConfiguration'
        stylesheetConfiguration:
          $ref: '#/components/schemas/StylesheetConfiguration'
    ViewDataReact:
      type: object
      properties:
        viewpoint:
          $ref: '#/components/schemas/Viewpoint'
        viewDataId:
          type: string
        viewDataRef:
          type: object
          allOf:
          - $ref: '#/components/schemas/ViewDataRef'
          deprecated: true
        imageOnly:
          type: boolean
        viewpointUrl:
          format: uri
          type: string
        imageUrl:
          format: uri
          type: string
        modelRevisions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ModelRevision'
        modelIds:
          uniqueItems: true
          type: array
          items:
            type: string
        documents:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/DocumentReferenceEntity'
        referencingDeletedModels:
          type: boolean
        showModelsPartialWarning:
          type: boolean
        selectedComponentGuids:
          uniqueItems: true
          type: array
          items:
            type: string
        createdById:
          type: string
        createdAt:
          format: int64
          type: integer
        queryId:
          type: string
    ViewDataRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    ViewRenderer:
      type: object
    Viewpoint:
      type: object
      properties:
        viewDataRef:
          $ref: '#/components/schemas/ViewDataRef'
        cameraType:
          type: string
        location:
          $ref: '#/components/schemas/Point'
        direction:
          $ref: '#/components/schemas/Direction'
        up:
          $ref: '#/components/schemas/Direction'
        fov:
          format: double
          type: number
        aspectRatio:
          format: double
          type: number
        viewToWorldScale:
          format: double
          type: number
        clippingPlanes:
          type: array
          items:
            $ref: '#/components/schemas/ClippingPlane'
        showModelsPartialWarning:
          type: boolean
        lockRevisions:
          type: boolean
        type:
          type: string
    ViewpointDocumentType:
      enum:
      - DOCUMENT
      type: string
    VisualizationEntity:
      type: object
      properties:
        viewpoint:
          $ref: '#/components/schemas/Viewpoint'
        actionInfo:
          $ref: '#/components/schemas/ActionInfoData'
        relatedModels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ModelRevision'
        relatedModelRefs:
          type: array
          items:
            type: string
        documents:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/DocumentReferenceEntity'
        queryId:
          type: string
        objectState:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ObjectState'
    VisualizationViewData:
      type: object
      properties:
        viewpoint:
          $ref: '#/components/schemas/Viewpoint'
        actionInfo:
          $ref: '#/components/schemas/ActionInfoData'
        defaultRevision:
          $ref: '#/components/schemas/Revision'
        relatedModels:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ModelRevision'
        followLastRevision:
          type: boolean
        queryId:
          type: string
        objectIds:
          type: object
          additionalProperties:
            type: string
    WorkPlan:
      type: object
      properties:
        ref:
          $ref: '#/components/schemas/WorkPlanRef'
        modelRef:
          $ref: '#/components/schemas/ModelRef'
        revisionRef:
          $ref: '#/components/schemas/RevisionRef'
        oid:
          format: int64
          type: integer
        name:
          type: string
        workSchedules:
          type: array
          items:
            $ref: '#/components/schemas/WorkSchedule'
    WorkPlanComponentView:
      type: object
      properties:
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
        context:
          $ref: '#/components/schemas/ArenaViewContext'
        locale:
          type: object
        randomId:
          type: string
        languageTag:
          type: string
        iconsVersion:
          format: int32
          type: integer
        templateChain:
          type: array
          items:
            type: string
        currentTemplate:
          type: string
        componentTemplateName:
          type: string
        yield:
          type: string
        workPlan:
          $ref: '#/components/schemas/WorkPlan'
    WorkPlanRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    WorkPlanSelect:
      type: object
      properties:
        data:
          type: array
          items: {}
        selected:
          type: string
        classes:
          type: string
        dropdownClass:
          type: string
        placeholder:
          type: string
        newItemText:
          type: string
        newItemValue:
          type: string
        unlinkedName:
          type: string
        relativeSizeContainer:
          type: string
        unassignedText:
          type: string
        unassignedValue:
          type: string
        empty:
          type: boolean
    WorkPlanSelectComponentView:
      type: object
      properties:
        charset:
          type: object
          writeOnly: true
        renderingTimer:
          type: object
          allOf:
          - $ref: '#/components/schemas/Timer'
          writeOnly: true
        context:
          $ref: '#/components/schemas/ArenaViewContext'
        locale:
          type: object
        randomId:
          type: string
        languageTag:
          type: string
        iconsVersion:
          format: int32
          type: integer
        templateChain:
          type: array
          items:
            type: string
        currentTemplate:
          type: string
        componentTemplateName:
          type: string
        yield:
          type: string
        workPlanSelect:
          $ref: '#/components/schemas/WorkPlanSelect'
    WorkSchedule:
      type: object
      properties:
        oid:
          format: int64
          type: integer
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/WorkTask'
    WorkTask:
      type: object
      properties:
        oid:
          format: int64
          type: integer
        parentOid:
          format: int64
          type: integer
        index:
          format: int64
          type: integer
        taskId:
          type: string
        name:
          type: string
        description:
          type: string
        startTime:
          format: int64
          type: integer
        finishTime:
          format: int64
          type: integer
        duration:
          format: double
          type: number
        critical:
          type: boolean
        milestone:
          type: boolean
        taskLevel:
          format: int32
          type: integer
        subTasks:
          type: array
          items:
            $ref: '#/components/schemas/WorkTask'
        workProducts:
          type: array
          items:
            type: string
        durationString:
          type: string
    ZipRef:
      type: object
      properties:
        value:
          type: string
        shortValue:
          type: string
    ZipUploadEntity:
      type: object
      properties:
        id:
          type: string
        uploadedAt:
          format: int64
          type: integer
        name:
          type: string
        uploadedBy:
          type: string
        startedAt:
          format: int64
          type: integer
        endedAt:
          format: int64
          type: integer
        status:
          type: string
        fileSize:
          format: int64
          type: integer
        failure:
          type: string
        report:
          $ref: '#/components/schemas/ZipUploadReportEntity'
        uploadZipOptions:
          $ref: '#/components/schemas/ZipUploadOptionsEntity'
    ZipUploadOptionsEntity:
      type: object
      properties:
        fileType:
          type: string
        currentFolderId:
          type: string
    ZipUploadReportEntity:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ZipUploadReportItemEntity'
    ZipUploadReportItemEntity:
      type: object
      properties:
        documentId:
          type: string
        fileId:
          type: string
        folderId:
          type: string
        path:
          type: string
        name:
          type: string
        fileSize:
          format: int64
          type: integer
        folder:
          type: boolean
        resultType:
          type: string
        failed:
          type: boolean
        failureType:
          type: string
